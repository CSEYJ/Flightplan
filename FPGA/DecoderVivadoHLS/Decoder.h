#ifndef HEADER_DECODER
#define HEADER_DECODER

#include "Configuration.h"
#include "Types.h"

#define DIVIDE_AND_ROUND_UP(Dividend, Divisor) ((Dividend + Divisor - 1) / Divisor)

#define WORDS_PER_PACKET (DIVIDE_AND_ROUND_UP(FEC_MAX_PACKET_SIZE, 8))
#define BYTES_PER_WORD (FEC_AXI_BUS_WIDTH / 8)

#define MAC_ADDR_WIDTH (48)

#define ETH_TYPE_START (0)
#define ETH_TYPE_END (FEC_ETHER_TYPE_WIDTH - 1)
#define ETH_SRC_START (ETH_TYPE_END + 1)
#define ETH_SRC_END (ETH_TYPE_END + MAC_ADDR_WIDTH)
#define ETH_DST_START (ETH_SRC_END + 1)
#define ETH_DST_END (ETH_SRC_END + MAC_ADDR_WIDTH)
#define ETH_IS_VALID_START (ETH_DST_END + 1)
#define ETH_IS_VALID_END (ETH_DST_END + 1)
#define ETH_HEADER_SIZE (ETH_IS_VALID_END + 1)

#define FEC_PACKET_LENGTH_START (0)
#define FEC_PACKET_LENGTH_END (FEC_PACKET_LENGTH_WIDTH - 1)
#define FEC_ORIGINAL_TYPE_START (FEC_PACKET_LENGTH_END + 1)
#define FEC_ORIGINAL_TYPE_END (FEC_PACKET_LENGTH_END + FEC_ETHER_TYPE_WIDTH)
#define FEC_PACKET_INDEX_START (FEC_ORIGINAL_TYPE_END + 1)
#define FEC_PACKET_INDEX_END (FEC_ORIGINAL_TYPE_END + FEC_PACKET_INDEX_WIDTH)
#define FEC_BLOCK_INDEX_START (FEC_PACKET_INDEX_END + 1)
#define FEC_BLOCK_INDEX_END (FEC_PACKET_INDEX_END + FEC_BLOCK_INDEX_WIDTH)
#define FEC_TRAFFIC_CLASS_START (FEC_BLOCK_INDEX_END + 1)
#define FEC_TRAFFIC_CLASS_END (FEC_BLOCK_INDEX_END + FEC_TRAFFIC_CLASS_WIDTH)
#define FEC_IS_VALID_START (FEC_TRAFFIC_CLASS_END + 1)
#define FEC_IS_VALID_END (FEC_TRAFFIC_CLASS_END + 1)
#define FEC_HEADER_SIZE (FEC_IS_VALID_END + 1)

typedef ap_uint<FEC_TRAFFIC_CLASS_WIDTH> traffic_class;
typedef ap_uint<FEC_BLOCK_INDEX_WIDTH> block_index;
typedef ap_uint<FEC_PACKET_INDEX_WIDTH> packet_index;
typedef ap_uint<FEC_PACKET_LENGTH_WIDTH> packet_length;
typedef ap_uint<FEC_ETHER_TYPE_WIDTH> packet_type;
typedef ap_uint<FEC_K_WIDTH> k_type;
typedef ap_uint<FEC_H_WIDTH> h_type;
typedef ap_uint<FEC_AXI_BUS_WIDTH> data_word;

#endif
