// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module GF_multiply (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        X,
        Y,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] X;
input  [7:0] Y;
output  [7:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [7:0] Table_r_address0;
reg    Table_r_ce0;
wire   [7:0] Table_r_q0;
wire   [7:0] Table_r_address1;
reg    Table_r_ce1;
wire   [7:0] Table_r_q1;
wire   [7:0] Table_1_address0;
reg    Table_1_ce0;
wire   [7:0] Table_1_q0;
wire   [0:0] tmp_fu_73_p2;
reg   [0:0] tmp_reg_154;
reg   [0:0] ap_reg_pp0_iter1_tmp_reg_154;
wire   [0:0] tmp_s_fu_79_p2;
reg   [0:0] tmp_s_reg_159;
reg   [0:0] ap_reg_pp0_iter1_tmp_s_reg_159;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] tmp_i_fu_85_p1;
wire   [63:0] tmp_i1_fu_90_p1;
wire   [63:0] tmp_i5_fu_137_p1;
wire   [8:0] tmp_i4_cast_fu_95_p1;
wire   [8:0] tmp_i_cast_fu_99_p1;
wire   [8:0] Sum_fu_103_p2;
wire   [7:0] tmp_2_i_fu_117_p2;
wire   [0:0] tmp_25_fu_109_p3;
wire   [7:0] tmp_3_i_fu_123_p2;
wire   [7:0] X_assign_4_fu_129_p3;
wire   [0:0] or_cond_fu_142_p2;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

GF_multiply_Table_r #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
Table_r_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Table_r_address0),
    .ce0(Table_r_ce0),
    .q0(Table_r_q0),
    .address1(Table_r_address1),
    .ce1(Table_r_ce1),
    .q1(Table_r_q1)
);

GF_multiply_Table_1 #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
Table_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Table_1_address0),
    .ce0(Table_1_ce0),
    .q0(Table_1_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0))) begin
        ap_reg_pp0_iter1_tmp_reg_154 <= tmp_reg_154;
        ap_reg_pp0_iter1_tmp_s_reg_159 <= tmp_s_reg_159;
        tmp_reg_154 <= tmp_fu_73_p2;
        tmp_s_reg_159 <= tmp_s_fu_79_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        Table_1_ce0 = 1'b1;
    end else begin
        Table_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_start) & (ap_block_pp0_stage0_11001 == 1'b0))) begin
        Table_r_ce0 = 1'b1;
    end else begin
        Table_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_start) & (ap_block_pp0_stage0_11001 == 1'b0))) begin
        Table_r_ce1 = 1'b1;
    end else begin
        Table_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_start) & (ap_block_pp0_stage0 == 1'b0)) | ((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_idle_pp0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_start) & (ap_block_pp0_stage0_11001 == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_idle_pp0_0to1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Sum_fu_103_p2 = (tmp_i4_cast_fu_95_p1 + tmp_i_cast_fu_99_p1);

assign Table_1_address0 = tmp_i5_fu_137_p1;

assign Table_r_address0 = tmp_i_fu_85_p1;

assign Table_r_address1 = tmp_i1_fu_90_p1;

assign X_assign_4_fu_129_p3 = ((tmp_25_fu_109_p3[0:0] === 1'b1) ? tmp_3_i_fu_123_p2 : tmp_2_i_fu_117_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'b0 == ap_start) & (1'b1 == ap_start));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == ap_start) & (1'b1 == ap_start));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (1'b0 == ap_start);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = ((or_cond_fu_142_p2[0:0] === 1'b1) ? 8'd0 : Table_1_q0);

assign or_cond_fu_142_p2 = (ap_reg_pp0_iter1_tmp_reg_154 | ap_reg_pp0_iter1_tmp_s_reg_159);

assign tmp_25_fu_109_p3 = Sum_fu_103_p2[32'd8];

assign tmp_2_i_fu_117_p2 = (Table_r_q1 + Table_r_q0);

assign tmp_3_i_fu_123_p2 = (tmp_2_i_fu_117_p2 + 8'd1);

assign tmp_fu_73_p2 = ((X == 8'd0) ? 1'b1 : 1'b0);

assign tmp_i1_fu_90_p1 = Y;

assign tmp_i4_cast_fu_95_p1 = Table_r_q0;

assign tmp_i5_fu_137_p1 = X_assign_4_fu_129_p3;

assign tmp_i_cast_fu_99_p1 = Table_r_q1;

assign tmp_i_fu_85_p1 = X;

assign tmp_s_fu_79_p2 = ((Y == 8'd0) ? 1'b1 : 1'b0);

endmodule //GF_multiply
