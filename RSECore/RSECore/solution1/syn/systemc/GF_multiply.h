// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _GF_multiply_HH_
#define _GF_multiply_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "GF_multiply_Table_r.h"
#include "GF_multiply_Table_1.h"

namespace ap_rtl {

struct GF_multiply : public sc_module {
    // Port declarations 9
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<8> > X;
    sc_in< sc_lv<8> > Y;
    sc_out< sc_lv<8> > ap_return;


    // Module declarations
    GF_multiply(sc_module_name name);
    SC_HAS_PROCESS(GF_multiply);

    ~GF_multiply();

    sc_trace_file* mVcdFile;

    GF_multiply_Table_r* Table_r_U;
    GF_multiply_Table_1* Table_1_U;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<8> > Table_r_address0;
    sc_signal< sc_logic > Table_r_ce0;
    sc_signal< sc_lv<8> > Table_r_q0;
    sc_signal< sc_lv<8> > Table_r_address1;
    sc_signal< sc_logic > Table_r_ce1;
    sc_signal< sc_lv<8> > Table_r_q1;
    sc_signal< sc_lv<8> > Table_1_address0;
    sc_signal< sc_logic > Table_1_ce0;
    sc_signal< sc_lv<8> > Table_1_q0;
    sc_signal< sc_lv<1> > tmp_fu_73_p2;
    sc_signal< sc_lv<1> > tmp_reg_154;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter1_tmp_reg_154;
    sc_signal< sc_lv<1> > tmp_s_fu_79_p2;
    sc_signal< sc_lv<1> > tmp_s_reg_159;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter1_tmp_s_reg_159;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_lv<64> > tmp_i_fu_85_p1;
    sc_signal< sc_lv<64> > tmp_i1_fu_90_p1;
    sc_signal< sc_lv<64> > tmp_i5_fu_137_p1;
    sc_signal< sc_lv<9> > tmp_i4_cast_fu_95_p1;
    sc_signal< sc_lv<9> > tmp_i_cast_fu_99_p1;
    sc_signal< sc_lv<9> > Sum_fu_103_p2;
    sc_signal< sc_lv<8> > tmp_2_i_fu_117_p2;
    sc_signal< sc_lv<1> > tmp_25_fu_109_p3;
    sc_signal< sc_lv<8> > tmp_3_i_fu_123_p2;
    sc_signal< sc_lv<8> > X_assign_4_fu_129_p3;
    sc_signal< sc_lv<1> > or_cond_fu_142_p2;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0_0to1;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_pp0_stage0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<8> ap_const_lv8_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_Sum_fu_103_p2();
    void thread_Table_1_address0();
    void thread_Table_1_ce0();
    void thread_Table_r_address0();
    void thread_Table_r_address1();
    void thread_Table_r_ce0();
    void thread_Table_r_ce1();
    void thread_X_assign_4_fu_129_p3();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_block_state3_pp0_stage0_iter2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to1();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_ap_return();
    void thread_or_cond_fu_142_p2();
    void thread_tmp_25_fu_109_p3();
    void thread_tmp_2_i_fu_117_p2();
    void thread_tmp_3_i_fu_123_p2();
    void thread_tmp_fu_73_p2();
    void thread_tmp_i1_fu_90_p1();
    void thread_tmp_i4_cast_fu_95_p1();
    void thread_tmp_i5_fu_137_p1();
    void thread_tmp_i_cast_fu_99_p1();
    void thread_tmp_i_fu_85_p1();
    void thread_tmp_s_fu_79_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
