// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "GF_multiply.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic GF_multiply::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic GF_multiply::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> GF_multiply::ap_ST_fsm_pp0_stage0 = "1";
const bool GF_multiply::ap_const_boolean_1 = true;
const sc_lv<32> GF_multiply::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool GF_multiply::ap_const_boolean_0 = false;
const sc_lv<8> GF_multiply::ap_const_lv8_0 = "00000000";
const sc_lv<32> GF_multiply::ap_const_lv32_8 = "1000";
const sc_lv<8> GF_multiply::ap_const_lv8_1 = "1";

GF_multiply::GF_multiply(sc_module_name name) : sc_module(name), mVcdFile(0) {
    Table_r_U = new GF_multiply_Table_r("Table_r_U");
    Table_r_U->clk(ap_clk);
    Table_r_U->reset(ap_rst);
    Table_r_U->address0(Table_r_address0);
    Table_r_U->ce0(Table_r_ce0);
    Table_r_U->q0(Table_r_q0);
    Table_r_U->address1(Table_r_address1);
    Table_r_U->ce1(Table_r_ce1);
    Table_r_U->q1(Table_r_q1);
    Table_1_U = new GF_multiply_Table_1("Table_1_U");
    Table_1_U->clk(ap_clk);
    Table_1_U->reset(ap_rst);
    Table_1_U->address0(Table_1_address0);
    Table_1_U->ce0(Table_1_ce0);
    Table_1_U->q0(Table_1_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_Sum_fu_103_p2);
    sensitive << ( tmp_i4_cast_fu_95_p1 );
    sensitive << ( tmp_i_cast_fu_99_p1 );

    SC_METHOD(thread_Table_1_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_i5_fu_137_p1 );

    SC_METHOD(thread_Table_1_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_Table_r_address0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_i_fu_85_p1 );

    SC_METHOD(thread_Table_r_address1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_i1_fu_90_p1 );

    SC_METHOD(thread_Table_r_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_Table_r_ce1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_X_assign_4_fu_129_p3);
    sensitive << ( tmp_2_i_fu_117_p2 );
    sensitive << ( tmp_25_fu_109_p3 );
    sensitive << ( tmp_3_i_fu_123_p2 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter2);

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_reg_pp0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_idle_pp0_0to1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_reset_idle_pp0);
    sensitive << ( ap_start );
    sensitive << ( ap_idle_pp0_0to1 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( Table_1_q0 );
    sensitive << ( or_cond_fu_142_p2 );

    SC_METHOD(thread_or_cond_fu_142_p2);
    sensitive << ( ap_reg_pp0_iter1_tmp_reg_154 );
    sensitive << ( ap_reg_pp0_iter1_tmp_s_reg_159 );

    SC_METHOD(thread_tmp_25_fu_109_p3);
    sensitive << ( Sum_fu_103_p2 );

    SC_METHOD(thread_tmp_2_i_fu_117_p2);
    sensitive << ( Table_r_q0 );
    sensitive << ( Table_r_q1 );

    SC_METHOD(thread_tmp_3_i_fu_123_p2);
    sensitive << ( tmp_2_i_fu_117_p2 );

    SC_METHOD(thread_tmp_fu_73_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( X );

    SC_METHOD(thread_tmp_i1_fu_90_p1);
    sensitive << ( Y );

    SC_METHOD(thread_tmp_i4_cast_fu_95_p1);
    sensitive << ( Table_r_q0 );

    SC_METHOD(thread_tmp_i5_fu_137_p1);
    sensitive << ( X_assign_4_fu_129_p3 );

    SC_METHOD(thread_tmp_i_cast_fu_99_p1);
    sensitive << ( Table_r_q1 );

    SC_METHOD(thread_tmp_i_fu_85_p1);
    sensitive << ( X );

    SC_METHOD(thread_tmp_s_fu_79_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( Y );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_reset_idle_pp0 );

    ap_CS_fsm = "1";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "GF_multiply_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, X, "(port)X");
    sc_trace(mVcdFile, Y, "(port)Y");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter2, "ap_block_state3_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, Table_r_address0, "Table_r_address0");
    sc_trace(mVcdFile, Table_r_ce0, "Table_r_ce0");
    sc_trace(mVcdFile, Table_r_q0, "Table_r_q0");
    sc_trace(mVcdFile, Table_r_address1, "Table_r_address1");
    sc_trace(mVcdFile, Table_r_ce1, "Table_r_ce1");
    sc_trace(mVcdFile, Table_r_q1, "Table_r_q1");
    sc_trace(mVcdFile, Table_1_address0, "Table_1_address0");
    sc_trace(mVcdFile, Table_1_ce0, "Table_1_ce0");
    sc_trace(mVcdFile, Table_1_q0, "Table_1_q0");
    sc_trace(mVcdFile, tmp_fu_73_p2, "tmp_fu_73_p2");
    sc_trace(mVcdFile, tmp_reg_154, "tmp_reg_154");
    sc_trace(mVcdFile, ap_reg_pp0_iter1_tmp_reg_154, "ap_reg_pp0_iter1_tmp_reg_154");
    sc_trace(mVcdFile, tmp_s_fu_79_p2, "tmp_s_fu_79_p2");
    sc_trace(mVcdFile, tmp_s_reg_159, "tmp_s_reg_159");
    sc_trace(mVcdFile, ap_reg_pp0_iter1_tmp_s_reg_159, "ap_reg_pp0_iter1_tmp_s_reg_159");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, tmp_i_fu_85_p1, "tmp_i_fu_85_p1");
    sc_trace(mVcdFile, tmp_i1_fu_90_p1, "tmp_i1_fu_90_p1");
    sc_trace(mVcdFile, tmp_i5_fu_137_p1, "tmp_i5_fu_137_p1");
    sc_trace(mVcdFile, tmp_i4_cast_fu_95_p1, "tmp_i4_cast_fu_95_p1");
    sc_trace(mVcdFile, tmp_i_cast_fu_99_p1, "tmp_i_cast_fu_99_p1");
    sc_trace(mVcdFile, Sum_fu_103_p2, "Sum_fu_103_p2");
    sc_trace(mVcdFile, tmp_2_i_fu_117_p2, "tmp_2_i_fu_117_p2");
    sc_trace(mVcdFile, tmp_25_fu_109_p3, "tmp_25_fu_109_p3");
    sc_trace(mVcdFile, tmp_3_i_fu_123_p2, "tmp_3_i_fu_123_p2");
    sc_trace(mVcdFile, X_assign_4_fu_129_p3, "X_assign_4_fu_129_p3");
    sc_trace(mVcdFile, or_cond_fu_142_p2, "or_cond_fu_142_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0_0to1, "ap_idle_pp0_0to1");
    sc_trace(mVcdFile, ap_reset_idle_pp0, "ap_reset_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

GF_multiply::~GF_multiply() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete Table_r_U;
    delete Table_1_U;
}

void GF_multiply::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_pp0_stage0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp0_iter1 = ap_start.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_reg_pp0_iter1_tmp_reg_154 = tmp_reg_154.read();
        ap_reg_pp0_iter1_tmp_s_reg_159 = tmp_s_reg_159.read();
        tmp_reg_154 = tmp_fu_73_p2.read();
        tmp_s_reg_159 = tmp_s_fu_79_p2.read();
    }
}

void GF_multiply::thread_Sum_fu_103_p2() {
    Sum_fu_103_p2 = (!tmp_i4_cast_fu_95_p1.read().is_01() || !tmp_i_cast_fu_99_p1.read().is_01())? sc_lv<9>(): (sc_biguint<9>(tmp_i4_cast_fu_95_p1.read()) + sc_biguint<9>(tmp_i_cast_fu_99_p1.read()));
}

void GF_multiply::thread_Table_1_address0() {
    Table_1_address0 =  (sc_lv<8>) (tmp_i5_fu_137_p1.read());
}

void GF_multiply::thread_Table_1_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        Table_1_ce0 = ap_const_logic_1;
    } else {
        Table_1_ce0 = ap_const_logic_0;
    }
}

void GF_multiply::thread_Table_r_address0() {
    Table_r_address0 =  (sc_lv<8>) (tmp_i_fu_85_p1.read());
}

void GF_multiply::thread_Table_r_address1() {
    Table_r_address1 =  (sc_lv<8>) (tmp_i1_fu_90_p1.read());
}

void GF_multiply::thread_Table_r_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        Table_r_ce0 = ap_const_logic_1;
    } else {
        Table_r_ce0 = ap_const_logic_0;
    }
}

void GF_multiply::thread_Table_r_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        Table_r_ce1 = ap_const_logic_1;
    } else {
        Table_r_ce1 = ap_const_logic_0;
    }
}

void GF_multiply::thread_X_assign_4_fu_129_p3() {
    X_assign_4_fu_129_p3 = (!tmp_25_fu_109_p3.read()[0].is_01())? sc_lv<8>(): ((tmp_25_fu_109_p3.read()[0].to_bool())? tmp_3_i_fu_123_p2.read(): tmp_2_i_fu_117_p2.read());
}

void GF_multiply::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[0];
}

void GF_multiply::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void GF_multiply::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()));
}

void GF_multiply::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()));
}

void GF_multiply::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read());
}

void GF_multiply::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void GF_multiply::thread_ap_block_state3_pp0_stage0_iter2() {
    ap_block_state3_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void GF_multiply::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void GF_multiply::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void GF_multiply::thread_ap_enable_reg_pp0_iter0() {
    ap_enable_reg_pp0_iter0 = ap_start.read();
}

void GF_multiply::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void GF_multiply::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void GF_multiply::thread_ap_idle_pp0_0to1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0_0to1 = ap_const_logic_1;
    } else {
        ap_idle_pp0_0to1 = ap_const_logic_0;
    }
}

void GF_multiply::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void GF_multiply::thread_ap_reset_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_0to1.read()))) {
        ap_reset_idle_pp0 = ap_const_logic_1;
    } else {
        ap_reset_idle_pp0 = ap_const_logic_0;
    }
}

void GF_multiply::thread_ap_return() {
    ap_return = (!or_cond_fu_142_p2.read()[0].is_01())? sc_lv<8>(): ((or_cond_fu_142_p2.read()[0].to_bool())? ap_const_lv8_0: Table_1_q0.read());
}

void GF_multiply::thread_or_cond_fu_142_p2() {
    or_cond_fu_142_p2 = (ap_reg_pp0_iter1_tmp_reg_154.read() | ap_reg_pp0_iter1_tmp_s_reg_159.read());
}

void GF_multiply::thread_tmp_25_fu_109_p3() {
    tmp_25_fu_109_p3 = Sum_fu_103_p2.read().range(8, 8);
}

void GF_multiply::thread_tmp_2_i_fu_117_p2() {
    tmp_2_i_fu_117_p2 = (!Table_r_q1.read().is_01() || !Table_r_q0.read().is_01())? sc_lv<8>(): (sc_biguint<8>(Table_r_q1.read()) + sc_biguint<8>(Table_r_q0.read()));
}

void GF_multiply::thread_tmp_3_i_fu_123_p2() {
    tmp_3_i_fu_123_p2 = (!tmp_2_i_fu_117_p2.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(tmp_2_i_fu_117_p2.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void GF_multiply::thread_tmp_fu_73_p2() {
    tmp_fu_73_p2 = (!X.read().is_01() || !ap_const_lv8_0.is_01())? sc_lv<1>(): sc_lv<1>(X.read() == ap_const_lv8_0);
}

void GF_multiply::thread_tmp_i1_fu_90_p1() {
    tmp_i1_fu_90_p1 = esl_zext<64,8>(Y.read());
}

void GF_multiply::thread_tmp_i4_cast_fu_95_p1() {
    tmp_i4_cast_fu_95_p1 = esl_zext<9,8>(Table_r_q0.read());
}

void GF_multiply::thread_tmp_i5_fu_137_p1() {
    tmp_i5_fu_137_p1 = esl_zext<64,8>(X_assign_4_fu_129_p3.read());
}

void GF_multiply::thread_tmp_i_cast_fu_99_p1() {
    tmp_i_cast_fu_99_p1 = esl_zext<9,8>(Table_r_q1.read());
}

void GF_multiply::thread_tmp_i_fu_85_p1() {
    tmp_i_fu_85_p1 = esl_zext<64,8>(X.read());
}

void GF_multiply::thread_tmp_s_fu_79_p2() {
    tmp_s_fu_79_p2 = (!Y.read().is_01() || !ap_const_lv8_0.is_01())? sc_lv<1>(): sc_lv<1>(Y.read() == ap_const_lv8_0);
}

void GF_multiply::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

}

