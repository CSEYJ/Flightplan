// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "aesl_mux_load_4i368P.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const bool aesl_mux_load_4i368P::ap_const_boolean_1 = true;
const sc_lv<1> aesl_mux_load_4i368P::ap_const_lv1_0 = "0";
const sc_lv<2> aesl_mux_load_4i368P::ap_const_lv2_0 = "00";
const sc_lv<2> aesl_mux_load_4i368P::ap_const_lv2_1 = "1";
const sc_lv<2> aesl_mux_load_4i368P::ap_const_lv2_2 = "10";
const sc_logic aesl_mux_load_4i368P::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic aesl_mux_load_4i368P::ap_const_logic_0 = sc_dt::Log_0;

aesl_mux_load_4i368P::aesl_mux_load_4i368P(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_return);
    sensitive << ( or_cond_fu_72_p2 );
    sensitive << ( newSel_fu_64_p3 );
    sensitive << ( newSel1_fu_78_p3 );

    SC_METHOD(thread_newSel1_fu_78_p3);
    sensitive << ( parity_buffer_3 );
    sensitive << ( parity_buffer_0 );
    sensitive << ( sel_tmp_fu_46_p2 );

    SC_METHOD(thread_newSel_fu_64_p3);
    sensitive << ( parity_buffer_1 );
    sensitive << ( parity_buffer_2 );
    sensitive << ( sel_tmp4_fu_58_p2 );

    SC_METHOD(thread_or_cond_fu_72_p2);
    sensitive << ( sel_tmp4_fu_58_p2 );
    sensitive << ( sel_tmp2_fu_52_p2 );

    SC_METHOD(thread_sel_tmp2_fu_52_p2);
    sensitive << ( empty );

    SC_METHOD(thread_sel_tmp4_fu_58_p2);
    sensitive << ( empty );

    SC_METHOD(thread_sel_tmp_fu_46_p2);
    sensitive << ( empty );
    sensitive << ( or_cond_fu_72_p2 );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "aesl_mux_load_4i368P_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, empty, "(port)empty");
    sc_trace(mVcdFile, parity_buffer_3, "(port)parity_buffer_3");
    sc_trace(mVcdFile, parity_buffer_0, "(port)parity_buffer_0");
    sc_trace(mVcdFile, parity_buffer_1, "(port)parity_buffer_1");
    sc_trace(mVcdFile, parity_buffer_2, "(port)parity_buffer_2");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, sel_tmp_fu_46_p2, "sel_tmp_fu_46_p2");
    sc_trace(mVcdFile, or_cond_fu_72_p2, "or_cond_fu_72_p2");
    sc_trace(mVcdFile, sel_tmp4_fu_58_p2, "sel_tmp4_fu_58_p2");
    sc_trace(mVcdFile, sel_tmp2_fu_52_p2, "sel_tmp2_fu_52_p2");
    sc_trace(mVcdFile, newSel_fu_64_p3, "newSel_fu_64_p3");
    sc_trace(mVcdFile, newSel1_fu_78_p3, "newSel1_fu_78_p3");
#endif

    }
}

aesl_mux_load_4i368P::~aesl_mux_load_4i368P() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void aesl_mux_load_4i368P::thread_ap_return() {
    ap_return = (!or_cond_fu_72_p2.read()[0].is_01())? sc_lv<368>(): ((or_cond_fu_72_p2.read()[0].to_bool())? newSel_fu_64_p3.read(): newSel1_fu_78_p3.read());
}

void aesl_mux_load_4i368P::thread_newSel1_fu_78_p3() {
    newSel1_fu_78_p3 = (!sel_tmp_fu_46_p2.read()[0].is_01())? sc_lv<368>(): ((sel_tmp_fu_46_p2.read()[0].to_bool())? parity_buffer_0.read(): parity_buffer_3.read());
}

void aesl_mux_load_4i368P::thread_newSel_fu_64_p3() {
    newSel_fu_64_p3 = (!sel_tmp4_fu_58_p2.read()[0].is_01())? sc_lv<368>(): ((sel_tmp4_fu_58_p2.read()[0].to_bool())? parity_buffer_2.read(): parity_buffer_1.read());
}

void aesl_mux_load_4i368P::thread_or_cond_fu_72_p2() {
    or_cond_fu_72_p2 = (sel_tmp4_fu_58_p2.read() | sel_tmp2_fu_52_p2.read());
}

void aesl_mux_load_4i368P::thread_sel_tmp2_fu_52_p2() {
    sel_tmp2_fu_52_p2 = (!empty.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(empty.read() == ap_const_lv2_1);
}

void aesl_mux_load_4i368P::thread_sel_tmp4_fu_58_p2() {
    sel_tmp4_fu_58_p2 = (!empty.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(empty.read() == ap_const_lv2_2);
}

void aesl_mux_load_4i368P::thread_sel_tmp_fu_46_p2() {
    sel_tmp_fu_46_p2 = (!empty.read().is_01() || !ap_const_lv2_0.is_01())? sc_lv<1>(): sc_lv<1>(empty.read() == ap_const_lv2_0);
}

}

