-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity GF_multiply is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    X : IN STD_LOGIC_VECTOR (7 downto 0);
    Y : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of GF_multiply is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal Table_r_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Table_r_ce0 : STD_LOGIC;
    signal Table_r_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Table_r_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal Table_r_ce1 : STD_LOGIC;
    signal Table_r_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal Table_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Table_1_ce0 : STD_LOGIC;
    signal Table_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_73_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_154 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_tmp_reg_154 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_79_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_159 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_tmp_s_reg_159 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal tmp_i_fu_85_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i1_fu_90_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i5_fu_137_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i4_cast_fu_95_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_i_cast_fu_99_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal Sum_fu_103_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_2_i_fu_117_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_25_fu_109_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_i_fu_123_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal X_assign_4_fu_129_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_cond_fu_142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component GF_multiply_Table_r IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component GF_multiply_Table_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    Table_r_U : component GF_multiply_Table_r
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Table_r_address0,
        ce0 => Table_r_ce0,
        q0 => Table_r_q0,
        address1 => Table_r_address1,
        ce1 => Table_r_ce1,
        q1 => Table_r_q1);

    Table_1_U : component GF_multiply_Table_1
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Table_1_address0,
        ce0 => Table_1_ce0,
        q0 => Table_1_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter1_tmp_reg_154 <= tmp_reg_154;
                ap_reg_pp0_iter1_tmp_s_reg_159 <= tmp_s_reg_159;
                tmp_reg_154 <= tmp_fu_73_p2;
                tmp_s_reg_159 <= tmp_s_fu_79_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    Sum_fu_103_p2 <= std_logic_vector(unsigned(tmp_i4_cast_fu_95_p1) + unsigned(tmp_i_cast_fu_99_p1));
    Table_1_address0 <= tmp_i5_fu_137_p1(8 - 1 downto 0);

    Table_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            Table_1_ce0 <= ap_const_logic_1;
        else 
            Table_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Table_r_address0 <= tmp_i_fu_85_p1(8 - 1 downto 0);
    Table_r_address1 <= tmp_i1_fu_90_p1(8 - 1 downto 0);

    Table_r_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_start) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0))) then 
            Table_r_ce0 <= ap_const_logic_1;
        else 
            Table_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Table_r_ce1_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_start) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0))) then 
            Table_r_ce1 <= ap_const_logic_1;
        else 
            Table_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    X_assign_4_fu_129_p3 <= 
        tmp_3_i_fu_123_p2 when (tmp_25_fu_109_p3(0) = '1') else 
        tmp_2_i_fu_117_p2;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_start));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_start));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_const_logic_0 = ap_start);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_start) and (ap_block_pp0_stage0 = ap_const_boolean_0)) or ((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_idle_pp0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_start) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_idle_pp0_0to1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        ap_const_lv8_0 when (or_cond_fu_142_p2(0) = '1') else 
        Table_1_q0;
    or_cond_fu_142_p2 <= (ap_reg_pp0_iter1_tmp_reg_154 or ap_reg_pp0_iter1_tmp_s_reg_159);
    tmp_25_fu_109_p3 <= Sum_fu_103_p2(8 downto 8);
    tmp_2_i_fu_117_p2 <= std_logic_vector(unsigned(Table_r_q1) + unsigned(Table_r_q0));
    tmp_3_i_fu_123_p2 <= std_logic_vector(unsigned(tmp_2_i_fu_117_p2) + unsigned(ap_const_lv8_1));
    tmp_fu_73_p2 <= "1" when (X = ap_const_lv8_0) else "0";
    tmp_i1_fu_90_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Y),64));
    tmp_i4_cast_fu_95_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Table_r_q0),9));
    tmp_i5_fu_137_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(X_assign_4_fu_129_p3),64));
    tmp_i_cast_fu_99_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Table_r_q1),9));
    tmp_i_fu_85_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(X),64));
    tmp_s_fu_79_p2 <= "1" when (Y = ap_const_lv8_0) else "0";
end behav;
