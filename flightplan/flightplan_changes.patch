diff --git a/frontends/CMakeLists.txt b/frontends/CMakeLists.txt
index af66d8d..90c790e 100644
--- a/frontends/CMakeLists.txt
+++ b/frontends/CMakeLists.txt
@@ -26,6 +26,12 @@ set (P4_FRONTEND_SRCS
   p4/evaluator/evaluator.cpp
   p4/evaluator/substituteParameters.cpp
   p4/externInstance.cpp
+  p4/flightplan.cpp
+  p4/flightplan_dot.cpp
+  p4/flightplan_ext.cpp
+  p4/flightplan_preanalysis.cpp
+  p4/flightplan_analysis.cpp
+  p4/flightplan_stmt.cpp
   p4/fromv1.0/converters.cpp
   p4/fromv1.0/programStructure.cpp
   p4/frontend.cpp
@@ -85,6 +91,7 @@ set (P4_FRONTEND_HDRS
   p4/evaluator/evaluator.h
   p4/evaluator/substituteParameters.h
   p4/externInstance.h
+  p4/flightplan.h
   p4/fromv1.0/converters.h
   p4/fromv1.0/programStructure.h
   p4/fromv1.0/v1model.h
diff --git a/frontends/common/options.cpp b/frontends/common/options.cpp
index 54846f9..8b0f1a0 100644
--- a/frontends/common/options.cpp
+++ b/frontends/common/options.cpp
@@ -183,6 +183,15 @@ CompilerOptions::CompilerOptions() : Util::Options(defaultMessage) {
                   "  sourceFile:level,...,sourceFile:level\n"
                   "where 'sourceFile' is a compiler source file and\n"
                   "'level' is the verbosity level for LOG messages in that file");
+    registerOption("--flightplan", nullptr,
+                    [this](const char*) { flightplan = true; return true; },
+                    "Activate the Flightplan pass");
+    registerOption("--flightplan_dest", "folder",
+                   [this](const char* arg) { flightplanFolder = arg; return true; },
+                   "Folder where P4 programs generated by Flightplan are written to\n");
+    registerOption("--flightplan_dots", nullptr,
+                    [this](const char*) { flightplan_DOT_output = true; return true; },
+                    "Generate DOT file showing split P4 program");
 }
 
 void CompilerOptions::setInputFile() {
diff --git a/frontends/common/options.h b/frontends/common/options.h
index 124c29d..227d6e6 100644
--- a/frontends/common/options.h
+++ b/frontends/common/options.h
@@ -80,6 +80,13 @@ class CompilerOptions : public Util::Options {
     // Dump and undump the IR tree
     bool debugJson = false;
 
+    // Activate the Flightplan pass
+    bool flightplan = false;
+    // Flightplan outputs are written in this folder
+    cstring flightplanFolder = ".";
+    // Produce DOT output for each program fragment.
+    bool flightplan_DOT_output = false;
+
     // Write a P4Runtime control plane API description to the specified file.
     cstring p4RuntimeFile = nullptr;
 
diff --git a/frontends/p4/flightplan.h b/frontends/p4/flightplan.h
index 4054e88..794dcf6 100644
--- a/frontends/p4/flightplan.h
+++ b/frontends/p4/flightplan.h
@@ -116,6 +116,20 @@ some of these could go in StmtFlow
     const FStmt* getCleaved() const {
         return cleaved;
     }
+
+// FIXME      
+//    map from split to declarations
+//    map from split to free variables
+//fix code emission in each split                                         
+//
+//free variables must come from earlier splits along the way
+//  from where the variable was last updated
+
+variables: read vs write
+    read: "in", parameters, RHS to assign
+    write: "out", LHS to assign
+
+
 };
 
 class DOT {
diff --git a/frontends/p4/flightplan_stmt.cpp b/frontends/p4/flightplan_stmt.cpp
index 033ceb3..4ca898b 100644
--- a/frontends/p4/flightplan_stmt.cpp
+++ b/frontends/p4/flightplan_stmt.cpp
@@ -28,7 +28,9 @@ FStmt::FStmt (const FStmt* container, unsigned dot_id, const FStmt* prev, const
 
 Stmt::Stmt (const FStmt* container, std::string dest_path, const IR::AssignmentStatement* stmt, const FStmt* prev, const FStmt* next) : FStmt(container, dest_path, prev, next), original(stmt) {}
 Stmt::Stmt (const FStmt* container, std::string dest_path, const IR::MethodCallStatement* stmt, const FStmt* prev, const FStmt* next) : FStmt(container, dest_path, prev, next), original(stmt) {}
-Stmt::Stmt (const FStmt* container, std::string dest_path, const IR::Declaration* stmt, const FStmt* prev, const FStmt* next) : FStmt(container, dest_path, prev, next), original(stmt) {}
+Stmt::Stmt (const FStmt* container, std::string dest_path, const IR::Declaration* stmt, const FStmt* prev, const FStmt* next) : FStmt(container, dest_path, prev, next), original(stmt) {
+    std::cout << "DECLARATION: " << stmt->toString() << std::endl;
+}
 
 TransferPoint::TransferPoint (const FStmt* container, std::string dest_path, const IR::MethodCallStatement* stmt, const FStmt* prev, const FStmt* next) : FStmt(container, dest_path, prev, next), original(stmt) {}
 
diff --git a/frontends/p4/frontend.cpp b/frontends/p4/frontend.cpp
index db0eb7e..ffb1139 100644
--- a/frontends/p4/frontend.cpp
+++ b/frontends/p4/frontend.cpp
@@ -34,6 +34,7 @@ limitations under the License.
 #include "directCalls.h"
 #include "dontcareArgs.h"
 #include "evaluator/evaluator.h"
+#include "flightplan.h"
 #include "frontends/common/constantFolding.h"
 #include "functionsInlining.h"
 #include "hierarchicalNames.h"
@@ -152,6 +153,9 @@ const IR::P4Program *FrontEnd::run(const CompilerOptions &options, const IR::P4P
         new RemoveAllUnusedDeclarations(&refMap, true),
         new SimplifyParsers(&refMap),
         new ResetHeaders(&refMap, &typeMap),
+
+//        new Flightplan(&refMap, &typeMap, options),
+
         new UniqueNames(&refMap),  // Give each local declaration a unique internal name
         new MoveDeclarations(),  // Move all local declarations to the beginning
         new MoveInitializers(),
@@ -180,6 +184,23 @@ const IR::P4Program *FrontEnd::run(const CompilerOptions &options, const IR::P4P
         new UniqueParameters(&refMap, &typeMap),
         new SimplifyControlFlow(&refMap, &typeMap),
         new HierarchicalNames(),
+
+// NOTE repeated by me
+        new ClearTypeMap(&typeMap),
+        evaluator,
+        new Inline(&refMap, &typeMap, evaluator),
+        new InlineActions(&refMap, &typeMap),
+        new InlineFunctions(&refMap, &typeMap),
+        // Check for constants only after inlining
+        new CheckConstants(&refMap, &typeMap),
+
+        new ConstantFolding(&refMap, &typeMap),
+
+        new SimplifyControlFlow(&refMap, &typeMap),
+// NOTE end of repetition
+
+        new Flightplan(&refMap, &typeMap, options),
+
         new FrontEndLast(),
     };
 
