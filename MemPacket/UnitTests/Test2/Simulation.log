Evaluating packet #1(120 bytes)
 0x0000(0) : 00 00 00 00 00 00 00 00 00 00 00 00 08 00 45 00 
0x0010(16) : 00 6a 59 b1 40 00 40 11 e2 cf 7f 00 00 01 7f 00 
0x0020(32) : 00 01 b7 7c 2b cb 00 56 fe 69 00 01 00 00 00 01 
0x0030(48) : 01 00 67 65 74 20 10 10 10 10 10 10 10 10 61 31 
0x0040(64) : 4c 48 4c 7a 42 61 76 49 72 30 39 38 43 79 74 2d 
0x0050(80) : 2e 34 77 4d 67 6c 54 56 79 70 35 66 46 66 68 61 
0x0060(96) : 77 30 59 35 61 52 4f 51 52 58 59 64 55 50 63 53 
0x0070(112) : 54 57 6f 37 46 46 0d 0a 
===================================================================
Entering system XilinxSwitch
input packet (120 bytes)
 0x0000(0) : 00 00 00 00 00 00 00 00 00 00 00 00 08 00 45 00 
0x0010(16) : 00 6a 59 b1 40 00 40 11 e2 cf 7f 00 00 01 7f 00 
0x0020(32) : 00 01 b7 7c 2b cb 00 56 fe 69 00 01 00 00 00 01 
0x0030(48) : 01 00 67 65 74 20 10 10 10 10 10 10 10 10 61 31 
0x0040(64) : 4c 48 4c 7a 42 61 76 49 72 30 39 38 43 79 74 2d 
0x0050(80) : 2e 34 77 4d 67 6c 54 56 79 70 35 66 46 66 68 61 
0x0060(96) : 77 30 59 35 61 52 4f 51 52 58 59 64 55 50 63 53 
0x0070(112) : 54 57 6f 37 46 46 0d 0a 
initial input and inout tuples:
	ioports = (
		ingress_port = 0x0(0)
		egress_port = 0x0(0)
	)
clear internal and output-only tuples
===================================================================
Entering engine Parser
input packet (120 bytes)
 0x0000(0) : 00 00 00 00 00 00 00 00 00 00 00 00 08 00 45 00 
0x0010(16) : 00 6a 59 b1 40 00 40 11 e2 cf 7f 00 00 01 7f 00 
0x0020(32) : 00 01 b7 7c 2b cb 00 56 fe 69 00 01 00 00 00 01 
0x0030(48) : 01 00 67 65 74 20 10 10 10 10 10 10 10 10 61 31 
0x0040(64) : 4c 48 4c 7a 42 61 76 49 72 30 39 38 43 79 74 2d 
0x0050(80) : 2e 34 77 4d 67 6c 54 56 79 70 35 66 46 66 68 61 
0x0060(96) : 77 30 59 35 61 52 4f 51 52 58 59 64 55 50 63 53 
0x0070(112) : 54 57 6f 37 46 46 0d 0a 
initial input and inout tuples:
	control = (
		offset = 0x0000(0)
		virtual_offset = 0x0000(0)
		section = 0x0(0)
		activeBank = 0x0(0)
		done = 0x0(0)
		error = 0x0(0)
	)
clear internal and output-only tuples
	hdr = (
		eth = (
		isValid = 0x0(0)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0000(0)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x0(0)
		version = 0x0(0)
		ihl = 0x0(0)
		diffserv = 0x00(0)
		totallen = 0x0000(0)
		identification = 0x0000(0)
		flags = 0x0(0)
		fragoffset = 0x0000(0)
		ttl = 0x00(0)
		protocol = 0x00(0)
		hdrchecksum = 0x0000(0)
		srcAddr = 0x00000000(0)
		dstAddr = 0x00000000(0)
	)
		udp = (
		isValid = 0x0(0)
		sport = 0x0000(0)
		dport = 0x0000(0)
		len = 0x0000(0)
		chksum = 0x0000(0)
	)
	)
	Parser_extracts = (
		size = 0x00000000(0)
	)
processing section start in stage 1
-------------------------------------------------------------------
Section start starting

	extracting 112 bits at offset 0x0000(0)
		dst_0 = 0x000000000000(0)
		src_0 = 0x000000000000(0)
		type_0 = 0x0800(2048)

	method update (tuples)
		hdr.eth.isValid = 0x1(1)
		hdr.eth.dst = 0x000000000000(0)
		hdr.eth.src = 0x000000000000(0)
		hdr.eth.type = 0x0800(2048)
		Parser_extracts.size = 0x00000070(112)


	method move_to_section = parse_ipv4

updated tuples:
	control = (
		offset = 0x0070(112)
		virtual_offset = 0x0070(112)
		section = 0x2(2)
		activeBank = 0x0(0)
		done = 0x0(0)
		error = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x0(0)
		version = 0x0(0)
		ihl = 0x0(0)
		diffserv = 0x00(0)
		totallen = 0x0000(0)
		identification = 0x0000(0)
		flags = 0x0(0)
		fragoffset = 0x0000(0)
		ttl = 0x00(0)
		protocol = 0x00(0)
		hdrchecksum = 0x0000(0)
		srcAddr = 0x00000000(0)
		dstAddr = 0x00000000(0)
	)
		udp = (
		isValid = 0x0(0)
		sport = 0x0000(0)
		dport = 0x0000(0)
		len = 0x0000(0)
		chksum = 0x0000(0)
	)
	)
	Parser_extracts = (
		size = 0x00000070(112)
	)
Section start finished
-------------------------------------------------------------------
processing section parse_ipv4 in stage 2
-------------------------------------------------------------------
Section parse_ipv4 starting

	extracting 160 bits at offset 0x0070(112)
		version_0 = 0x4(4)
		ihl_0 = 0x5(5)
		diffserv_0 = 0x00(0)
		totallen_0 = 0x006a(106)
		identification_0 = 0x59b1(22961)
		flags_0 = 0x2(2)
		fragoffset_0 = 0x0000(0)
		ttl_0 = 0x40(64)
		protocol_0 = 0x11(17)
		hdrchecksum_0 = 0xe2cf(58063)
		srcAddr_0 = 0x7f000001(2130706433)
		dstAddr_0 = 0x7f000001(2130706433)

	method update (tuples)
		hdr.ipv4.isValid = 0x1(1)
		hdr.ipv4.version = 0x4(4)
		hdr.ipv4.ihl = 0x5(5)
		hdr.ipv4.diffserv = 0x00(0)
		hdr.ipv4.totallen = 0x006a(106)
		hdr.ipv4.identification = 0x59b1(22961)
		hdr.ipv4.flags = 0x2(2)
		hdr.ipv4.fragoffset = 0x0000(0)
		hdr.ipv4.ttl = 0x40(64)
		hdr.ipv4.protocol = 0x11(17)
		hdr.ipv4.hdrchecksum = 0xe2cf(58063)
		hdr.ipv4.srcAddr = 0x7f000001(2130706433)
		hdr.ipv4.dstAddr = 0x7f000001(2130706433)
		Parser_extracts.size = 0x00000110(272)


	method move_to_section = parse_udp

updated tuples:
	control = (
		offset = 0x0110(272)
		virtual_offset = 0x0110(272)
		section = 0x3(3)
		activeBank = 0x0(0)
		done = 0x0(0)
		error = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x006a(106)
		identification = 0x59b1(22961)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xe2cf(58063)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x0(0)
		sport = 0x0000(0)
		dport = 0x0000(0)
		len = 0x0000(0)
		chksum = 0x0000(0)
	)
	)
	Parser_extracts = (
		size = 0x00000110(272)
	)
Section parse_ipv4 finished
-------------------------------------------------------------------
processing section parse_udp in stage 3
-------------------------------------------------------------------
Section parse_udp starting

	extracting 64 bits at offset 0x0110(272)
		sport_0 = 0xb77c(46972)
		dport_0 = 0x2bcb(11211)
		len_0 = 0x0056(86)
		chksum_0 = 0xfe69(65129)

	method update (tuples)
		hdr.udp.isValid = 0x1(1)
		hdr.udp.sport = 0xb77c(46972)
		hdr.udp.dport = 0x2bcb(11211)
		hdr.udp.len = 0x0056(86)
		hdr.udp.chksum = 0xfe69(65129)
		Parser_extracts.size = 0x00000150(336)


	method move_to_section = accept

updated tuples:
	control = (
		offset = 0x0150(336)
		virtual_offset = 0x0150(336)
		section = 0x4(4)
		activeBank = 0x0(0)
		done = 0x0(0)
		error = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x006a(106)
		identification = 0x59b1(22961)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xe2cf(58063)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0xb77c(46972)
		dport = 0x2bcb(11211)
		len = 0x0056(86)
		chksum = 0xfe69(65129)
	)
	)
	Parser_extracts = (
		size = 0x00000150(336)
	)
Section parse_udp finished
-------------------------------------------------------------------
processing section accept in stage 4
-------------------------------------------------------------------
Section accept starting


	method move_to_section = done(0)

updated tuples:
	control = (
		offset = 0x0150(336)
		virtual_offset = 0x0150(336)
		section = 0x0(0)
		activeBank = 0x0(0)
		done = 0x1(1)
		error = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x006a(106)
		identification = 0x59b1(22961)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xe2cf(58063)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0xb77c(46972)
		dport = 0x2bcb(11211)
		len = 0x0056(86)
		chksum = 0xfe69(65129)
	)
	)
	Parser_extracts = (
		size = 0x00000150(336)
	)
Section accept finished
-------------------------------------------------------------------
final inout and output tuples:

Note: this engine's wrapper will clear the upper control tuple fields on output, except for the 'control.error' field.

	control = (
		offset = 0x0000(0)
		virtual_offset = 0x0000(0)
		section = 0x0(0)
		activeBank = 0x0(0)
		done = 0x0(0)
		error = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x006a(106)
		identification = 0x59b1(22961)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xe2cf(58063)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0xb77c(46972)
		dport = 0x2bcb(11211)
		len = 0x0056(86)
		chksum = 0xfe69(65129)
	)
	)
	Parser_extracts = (
		size = 0x00000150(336)
	)
Exiting engine Parser
===================================================================
===================================================================
Entering engine CheckCache_lvl
input packet (0 bytes)
initial input and inout tuples:
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x006a(106)
		identification = 0x59b1(22961)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xe2cf(58063)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0xb77c(46972)
		dport = 0x2bcb(11211)
		len = 0x0056(86)
		chksum = 0xfe69(65129)
	)
	)
	ioports = (
		ingress_port = 0x0(0)
		egress_port = 0x0(0)
	)
clear internal and output-only tuples
	control = (
		offset = 0x0000(0)
		virtual_offset = 0x0000(0)
		section = 0x0(0)
		activeBank = 0x0(0)
		done = 0x0(0)
		error = 0x0(0)
	)
	CheckCache_fl = (
		forward_1 = 0x0(0)
	)
	local_state = (
		id = 0x0000(0)
	)
processing section setup in stage 1
-------------------------------------------------------------------
Section setup starting


	method move_to_section = done(0)

updated tuples:
	control = (
		offset = 0x0000(0)
		virtual_offset = 0x0000(0)
		section = 0x0(0)
		activeBank = 0x0(0)
		done = 0x1(1)
		error = 0x0(0)
	)
	CheckCache_fl = (
		forward_1 = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x006a(106)
		identification = 0x59b1(22961)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xe2cf(58063)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0xb77c(46972)
		dport = 0x2bcb(11211)
		len = 0x0056(86)
		chksum = 0xfe69(65129)
	)
	)
	ioports = (
		ingress_port = 0x0(0)
		egress_port = 0x0(0)
	)
	local_state = (
		id = 0x0000(0)
	)
Section setup finished
-------------------------------------------------------------------
final inout and output tuples:

Note: this engine's wrapper will clear the upper control tuple fields on output, except for the 'control.error' field.

	CheckCache_fl = (
		forward_1 = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x006a(106)
		identification = 0x59b1(22961)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xe2cf(58063)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0xb77c(46972)
		dport = 0x2bcb(11211)
		len = 0x0056(86)
		chksum = 0xfe69(65129)
	)
	)
	ioports = (
		ingress_port = 0x0(0)
		egress_port = 0x0(0)
	)
	local_state = (
		id = 0x0000(0)
	)
Exiting engine CheckCache_lvl
===================================================================
===================================================================
Entering engine CheckCache_lvl_0
input packet (0 bytes)
initial input and inout tuples:
	CheckCache_fl = (
		forward_1 = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x006a(106)
		identification = 0x59b1(22961)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xe2cf(58063)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0xb77c(46972)
		dport = 0x2bcb(11211)
		len = 0x0056(86)
		chksum = 0xfe69(65129)
	)
	)
	ioports = (
		ingress_port = 0x0(0)
		egress_port = 0x0(0)
	)
	local_state = (
		id = 0x0000(0)
	)
clear internal and output-only tuples
	control = (
		offset = 0x0000(0)
		virtual_offset = 0x0000(0)
		section = 0x0(0)
		activeBank = 0x0(0)
		done = 0x0(0)
		error = 0x0(0)
	)
	memcached_input = (
		stateful_valid = 0x0(0)
	)
processing section condition_sec_0 in stage 1
-------------------------------------------------------------------
Section condition_sec_0 starting

	method update (tuples)
		local_state.id = 0x0005(5)


	method move_to_section = condition_sec

updated tuples:
	control = (
		offset = 0x0000(0)
		virtual_offset = 0x0000(0)
		section = 0x2(2)
		activeBank = 0x0(0)
		done = 0x0(0)
		error = 0x0(0)
	)
	CheckCache_fl = (
		forward_1 = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x006a(106)
		identification = 0x59b1(22961)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xe2cf(58063)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0xb77c(46972)
		dport = 0x2bcb(11211)
		len = 0x0056(86)
		chksum = 0xfe69(65129)
	)
	)
	ioports = (
		ingress_port = 0x0(0)
		egress_port = 0x0(0)
	)
	local_state = (
		id = 0x0005(5)
	)
	memcached_input = (
		stateful_valid = 0x0(0)
	)
Section condition_sec_0 finished
-------------------------------------------------------------------
processing section condition_sec in stage 2
-------------------------------------------------------------------
Section condition_sec starting

	method update (tuples)
		local_state.id = 0x0005(5)


	method move_to_section = act_0_sec

updated tuples:
	control = (
		offset = 0x0000(0)
		virtual_offset = 0x0000(0)
		section = 0x1(1)
		activeBank = 0x0(0)
		done = 0x0(0)
		error = 0x0(0)
	)
	CheckCache_fl = (
		forward_1 = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x006a(106)
		identification = 0x59b1(22961)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xe2cf(58063)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0xb77c(46972)
		dport = 0x2bcb(11211)
		len = 0x0056(86)
		chksum = 0xfe69(65129)
	)
	)
	ioports = (
		ingress_port = 0x0(0)
		egress_port = 0x0(0)
	)
	local_state = (
		id = 0x0005(5)
	)
	memcached_input = (
		stateful_valid = 0x0(0)
	)
Section condition_sec finished
-------------------------------------------------------------------
processing section act_0_sec in stage 3
-------------------------------------------------------------------
Section act_0_sec starting

	method update (tuples)
		memcached_input.stateful_valid = 0x1(1)
		local_state.id = 0x0004(4)


	method move_to_section = local_end

updated tuples:
	control = (
		offset = 0x0000(0)
		virtual_offset = 0x0000(0)
		section = 0x4(4)
		activeBank = 0x0(0)
		done = 0x0(0)
		error = 0x0(0)
	)
	CheckCache_fl = (
		forward_1 = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x006a(106)
		identification = 0x59b1(22961)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xe2cf(58063)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0xb77c(46972)
		dport = 0x2bcb(11211)
		len = 0x0056(86)
		chksum = 0xfe69(65129)
	)
	)
	ioports = (
		ingress_port = 0x0(0)
		egress_port = 0x0(0)
	)
	local_state = (
		id = 0x0004(4)
	)
	memcached_input = (
		stateful_valid = 0x1(1)
	)
Section act_0_sec finished
-------------------------------------------------------------------
processing section local_end in stage 4
-------------------------------------------------------------------
Section local_end starting


	method move_to_section = done(0)

updated tuples:
	control = (
		offset = 0x0000(0)
		virtual_offset = 0x0000(0)
		section = 0x0(0)
		activeBank = 0x0(0)
		done = 0x1(1)
		error = 0x0(0)
	)
	CheckCache_fl = (
		forward_1 = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x006a(106)
		identification = 0x59b1(22961)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xe2cf(58063)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0xb77c(46972)
		dport = 0x2bcb(11211)
		len = 0x0056(86)
		chksum = 0xfe69(65129)
	)
	)
	ioports = (
		ingress_port = 0x0(0)
		egress_port = 0x0(0)
	)
	local_state = (
		id = 0x0004(4)
	)
	memcached_input = (
		stateful_valid = 0x1(1)
	)
Section local_end finished
-------------------------------------------------------------------
final inout and output tuples:

Note: this engine's wrapper will clear the upper control tuple fields on output, except for the 'control.error' field.

	CheckCache_fl = (
		forward_1 = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x006a(106)
		identification = 0x59b1(22961)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xe2cf(58063)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0xb77c(46972)
		dport = 0x2bcb(11211)
		len = 0x0056(86)
		chksum = 0xfe69(65129)
	)
	)
	ioports = (
		ingress_port = 0x0(0)
		egress_port = 0x0(0)
	)
	local_state = (
		id = 0x0004(4)
	)
	memcached_input = (
		stateful_valid = 0x1(1)
	)
Exiting engine CheckCache_lvl_0
===================================================================
===================================================================
Entering engine memcached_0
input packet (120 bytes)
 0x0000(0) : 00 00 00 00 00 00 00 00 00 00 00 00 08 00 45 00 
0x0010(16) : 00 6a 59 b1 40 00 40 11 e2 cf 7f 00 00 01 7f 00 
0x0020(32) : 00 01 b7 7c 2b cb 00 56 fe 69 00 01 00 00 00 01 
0x0030(48) : 01 00 67 65 74 20 10 10 10 10 10 10 10 10 61 31 
0x0040(64) : 4c 48 4c 7a 42 61 76 49 72 30 39 38 43 79 74 2d 
0x0050(80) : 2e 34 77 4d 67 6c 54 56 79 70 35 66 46 66 68 61 
0x0060(96) : 77 30 59 35 61 52 4f 51 52 58 59 64 55 50 63 53 
0x0070(112) : 54 57 6f 37 46 46 0d 0a 
initial input and inout tuples:
	control = (
		offset = 0x0000(0)
		virtual_offset = 0x0000(0)
		section = 0x0(0)
		activeBank = 0x0(0)
		done = 0x0(0)
		error = 0x0(0)
	)
	CheckCache_fl = (
		forward_1 = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x006a(106)
		identification = 0x59b1(22961)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xe2cf(58063)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0xb77c(46972)
		dport = 0x2bcb(11211)
		len = 0x0056(86)
		chksum = 0xfe69(65129)
	)
	)
	ioports = (
		ingress_port = 0x0(0)
		egress_port = 0x0(0)
	)
	local_state = (
		id = 0x0004(4)
	)
	Parser_extracts = (
		size = 0x00000150(336)
	)
	memcached_input = (
		stateful_valid = 0x1(1)
	)
clear internal and output-only tuples
	memcached_output = (
		forward = 0x0(0)
	)
Enter USER ENGINE FUNCTION
0
134235392
29934965349171217
16343421210727644928
483218915262550
18332183762483281921
72171279475544080
1157442765409247537
5496727433189094985
8228139433018881069
3329417198864979030
8750552789364926561
8588462575196458833
5933590796523561811
6077448505352654090
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<Inside MemCore<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< 
The No. 0Packet
1
128
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<Inside MemCore<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< 
===================================================================
Entering engine CheckCache_lvl_1
input packet (0 bytes)
initial input and inout tuples:
	CheckCache_fl = (
		forward_1 = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x006a(106)
		identification = 0x59b1(22961)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xe2cf(58063)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0xb77c(46972)
		dport = 0x2bcb(11211)
		len = 0x0056(86)
		chksum = 0xfe69(65129)
	)
	)
	ioports = (
		ingress_port = 0x0(0)
		egress_port = 0x0(0)
	)
	local_state = (
		id = 0x0004(4)
	)
	memcached_output = (
		forward = 0x0(0)
	)
clear internal and output-only tuples
	control = (
		offset = 0x0000(0)
		virtual_offset = 0x0000(0)
		section = 0x0(0)
		activeBank = 0x0(0)
		done = 0x0(0)
		error = 0x0(0)
	)
processing section local_start in stage 1
-------------------------------------------------------------------
Section local_start starting


	method move_to_section = memcached_sec

updated tuples:
	control = (
		offset = 0x0000(0)
		virtual_offset = 0x0000(0)
		section = 0x2(2)
		activeBank = 0x0(0)
		done = 0x0(0)
		error = 0x0(0)
	)
	CheckCache_fl = (
		forward_1 = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x006a(106)
		identification = 0x59b1(22961)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xe2cf(58063)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0xb77c(46972)
		dport = 0x2bcb(11211)
		len = 0x0056(86)
		chksum = 0xfe69(65129)
	)
	)
	ioports = (
		ingress_port = 0x0(0)
		egress_port = 0x0(0)
	)
	local_state = (
		id = 0x0004(4)
	)
	memcached_output = (
		forward = 0x0(0)
	)
Section local_start finished
-------------------------------------------------------------------
processing section memcached_sec in stage 2
-------------------------------------------------------------------
Section memcached_sec starting

	method update (tuples)
		CheckCache_fl.forward_1 = 0x0(0)


	method move_to_section = sink

updated tuples:
	control = (
		offset = 0x0000(0)
		virtual_offset = 0x0000(0)
		section = 0x3(3)
		activeBank = 0x0(0)
		done = 0x0(0)
		error = 0x0(0)
	)
	CheckCache_fl = (
		forward_1 = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x006a(106)
		identification = 0x59b1(22961)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xe2cf(58063)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0xb77c(46972)
		dport = 0x2bcb(11211)
		len = 0x0056(86)
		chksum = 0xfe69(65129)
	)
	)
	ioports = (
		ingress_port = 0x0(0)
		egress_port = 0x0(0)
	)
	local_state = (
		id = 0x0004(4)
	)
	memcached_output = (
		forward = 0x0(0)
	)
Section memcached_sec finished
-------------------------------------------------------------------
processing section sink in stage 3
-------------------------------------------------------------------
Section sink starting


	method move_to_section = done(0)

updated tuples:
	control = (
		offset = 0x0000(0)
		virtual_offset = 0x0000(0)
		section = 0x0(0)
		activeBank = 0x0(0)
		done = 0x1(1)
		error = 0x0(0)
	)
	CheckCache_fl = (
		forward_1 = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x006a(106)
		identification = 0x59b1(22961)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xe2cf(58063)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0xb77c(46972)
		dport = 0x2bcb(11211)
		len = 0x0056(86)
		chksum = 0xfe69(65129)
	)
	)
	ioports = (
		ingress_port = 0x0(0)
		egress_port = 0x0(0)
	)
	local_state = (
		id = 0x0004(4)
	)
	memcached_output = (
		forward = 0x0(0)
	)
Section sink finished
-------------------------------------------------------------------
final inout and output tuples:

Note: this engine's wrapper will clear the upper control tuple fields on output, except for the 'control.error' field.

	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x006a(106)
		identification = 0x59b1(22961)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xe2cf(58063)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0xb77c(46972)
		dport = 0x2bcb(11211)
		len = 0x0056(86)
		chksum = 0xfe69(65129)
	)
	)
	ioports = (
		ingress_port = 0x0(0)
		egress_port = 0x0(0)
	)
Exiting engine CheckCache_lvl_1
===================================================================
===================================================================
Entering engine Deparser
input packet (120 bytes)
 0x0000(0) : 00 00 00 00 00 00 00 00 00 00 00 00 08 00 45 00 
0x0010(16) : 00 6a 59 b1 40 00 40 11 e2 cf 7f 00 00 01 7f 00 
0x0020(32) : 00 01 b7 7c 2b cb 00 56 fe 69 00 01 00 00 00 01 
0x0030(48) : 01 00 67 65 74 20 10 10 10 10 10 10 10 10 61 31 
0x0040(64) : 4c 48 4c 7a 42 61 76 49 72 30 39 38 43 79 74 2d 
0x0050(80) : 2e 34 77 4d 67 6c 54 56 79 70 35 66 46 66 68 61 
0x0060(96) : 77 30 59 35 61 52 4f 51 52 58 59 64 55 50 63 53 
0x0070(112) : 54 57 6f 37 46 46 0d 0a 
initial input and inout tuples:
	control = (
		offset = 0x0000(0)
		virtual_offset = 0x0000(0)
		section = 0x0(0)
		activeBank = 0x0(0)
		done = 0x0(0)
		error = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x006a(106)
		identification = 0x59b1(22961)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xe2cf(58063)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0xb77c(46972)
		dport = 0x2bcb(11211)
		len = 0x0056(86)
		chksum = 0xfe69(65129)
	)
	)
	Deparser_extracts = (
		size = 0x00000150(336)
	)
clear internal and output-only tuples
processing section extract_headers_sec in stage 1
-------------------------------------------------------------------
Section extract_headers_sec starting


	method remove
	removing 42 bytes at byte 0:
 0x0000(0) : 00 00 00 00 00 00 00 00 00 00 00 00 08 00 45 00 
0x0010(16) : 00 6a 59 b1 40 00 40 11 e2 cf 7f 00 00 01 7f 00 
0x0020(32) : 00 01 b7 7c 2b cb 00 56 fe 69 
	method move_to_section = act_sec

updated tuples:
	control = (
		offset = 0x0000(0)
		virtual_offset = 0x0150(336)
		section = 0x1(1)
		activeBank = 0x0(0)
		done = 0x0(0)
		error = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x006a(106)
		identification = 0x59b1(22961)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xe2cf(58063)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0xb77c(46972)
		dport = 0x2bcb(11211)
		len = 0x0056(86)
		chksum = 0xfe69(65129)
	)
	)
	Deparser_extracts = (
		size = 0x00000150(336)
	)
Section extract_headers_sec finished
-------------------------------------------------------------------
processing section act_sec in stage 2
-------------------------------------------------------------------
Section act_sec starting


	method move_to_section = emit_3

updated tuples:
	control = (
		offset = 0x0000(0)
		virtual_offset = 0x0150(336)
		section = 0x5(5)
		activeBank = 0x0(0)
		done = 0x0(0)
		error = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x006a(106)
		identification = 0x59b1(22961)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xe2cf(58063)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0xb77c(46972)
		dport = 0x2bcb(11211)
		len = 0x0056(86)
		chksum = 0xfe69(65129)
	)
	)
	Deparser_extracts = (
		size = 0x00000150(336)
	)
Section act_sec finished
-------------------------------------------------------------------
processing section emit_3 in stage 3
-------------------------------------------------------------------
Section emit_3 starting

	method update (tuples)


	method update (packet)
		 dst = 0x000000000000(0)
		 src = 0x000000000000(0)
		 type = 0x0800(2048)

	method insert
	inserting 14 bytes at byte 0:
 0x0000(0) : 00 00 00 00 00 00 00 00 00 00 00 00 08 00 
	method move_to_section = emit_2

updated tuples:
	control = (
		offset = 0x0070(112)
		virtual_offset = 0x0150(336)
		section = 0x4(4)
		activeBank = 0x0(0)
		done = 0x0(0)
		error = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x006a(106)
		identification = 0x59b1(22961)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xe2cf(58063)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0xb77c(46972)
		dport = 0x2bcb(11211)
		len = 0x0056(86)
		chksum = 0xfe69(65129)
	)
	)
	Deparser_extracts = (
		size = 0x00000150(336)
	)
Section emit_3 finished
-------------------------------------------------------------------
processing section emit_2 in stage 4
-------------------------------------------------------------------
Section emit_2 starting

	method update (tuples)


	method update (packet)
		 traffic_class = 0x0(0)
		 block_index = 0x00(0)
		 packet_index = 0x00(0)
		 original_type = 0x0000(0)

	method insert
	inserting 0 bytes at byte 14:
 0x0000(0) :                                           
	method move_to_section = emit_1

updated tuples:
	control = (
		offset = 0x0070(112)
		virtual_offset = 0x0150(336)
		section = 0x3(3)
		activeBank = 0x0(0)
		done = 0x0(0)
		error = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x006a(106)
		identification = 0x59b1(22961)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xe2cf(58063)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0xb77c(46972)
		dport = 0x2bcb(11211)
		len = 0x0056(86)
		chksum = 0xfe69(65129)
	)
	)
	Deparser_extracts = (
		size = 0x00000150(336)
	)
Section emit_2 finished
-------------------------------------------------------------------
processing section emit_1 in stage 5
-------------------------------------------------------------------
Section emit_1 starting

	method update (tuples)


	method update (packet)
		 version = 0x4(4)
		 ihl = 0x5(5)
		 diffserv = 0x00(0)
		 totallen = 0x006a(106)
		 identification = 0x59b1(22961)
		 flags = 0x2(2)
		 fragoffset = 0x0000(0)
		 ttl = 0x40(64)
		 protocol = 0x11(17)
		 hdrchecksum = 0xe2cf(58063)
		 srcAddr = 0x7f000001(2130706433)
		 dstAddr = 0x7f000001(2130706433)

	method insert
	inserting 20 bytes at byte 14:
 0x0000(0) :                                           45 00 
0x0010(16) : 00 6a 59 b1 40 00 40 11 e2 cf 7f 00 00 01 7f 00 
0x0020(32) : 00 01 
	method move_to_section = emit_0

updated tuples:
	control = (
		offset = 0x0110(272)
		virtual_offset = 0x0150(336)
		section = 0x2(2)
		activeBank = 0x0(0)
		done = 0x0(0)
		error = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x006a(106)
		identification = 0x59b1(22961)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xe2cf(58063)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0xb77c(46972)
		dport = 0x2bcb(11211)
		len = 0x0056(86)
		chksum = 0xfe69(65129)
	)
	)
	Deparser_extracts = (
		size = 0x00000150(336)
	)
Section emit_1 finished
-------------------------------------------------------------------
processing section emit_0 in stage 6
-------------------------------------------------------------------
Section emit_0 starting

	method update (tuples)


	method update (packet)
		 sport = 0xb77c(46972)
		 dport = 0x2bcb(11211)
		 len = 0x0056(86)
		 chksum = 0xfe69(65129)

	method insert
	inserting 8 bytes at byte 34:
0x0020(32) :       b7 7c 2b cb 00 56 fe 69 
	method move_to_section = done(0)

updated tuples:
	control = (
		offset = 0x0150(336)
		virtual_offset = 0x0150(336)
		section = 0x0(0)
		activeBank = 0x0(0)
		done = 0x1(1)
		error = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x006a(106)
		identification = 0x59b1(22961)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xe2cf(58063)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0xb77c(46972)
		dport = 0x2bcb(11211)
		len = 0x0056(86)
		chksum = 0xfe69(65129)
	)
	)
	Deparser_extracts = (
		size = 0x00000150(336)
	)
Section emit_0 finished
-------------------------------------------------------------------
final inout and output tuples:

Note: this engine's wrapper will clear the upper control tuple fields on output, except for the 'control.error' field.

	control = (
		offset = 0x0000(0)
		virtual_offset = 0x0000(0)
		section = 0x0(0)
		activeBank = 0x0(0)
		done = 0x0(0)
		error = 0x0(0)
	)
output packet (120 bytes)
 0x0000(0) : 00 00 00 00 00 00 00 00 00 00 00 00 08 00 45 00 
0x0010(16) : 00 6a 59 b1 40 00 40 11 e2 cf 7f 00 00 01 7f 00 
0x0020(32) : 00 01 b7 7c 2b cb 00 56 fe 69 00 01 00 00 00 01 
0x0030(48) : 01 00 67 65 74 20 10 10 10 10 10 10 10 10 61 31 
0x0040(64) : 4c 48 4c 7a 42 61 76 49 72 30 39 38 43 79 74 2d 
0x0050(80) : 2e 34 77 4d 67 6c 54 56 79 70 35 66 46 66 68 61 
0x0060(96) : 77 30 59 35 61 52 4f 51 52 58 59 64 55 50 63 53 
0x0070(112) : 54 57 6f 37 46 46 0d 0a 
Exiting engine Deparser
===================================================================
final inout and output tuples:
	ioports = (
		ingress_port = 0x0(0)
		egress_port = 0x0(0)
	)
output packet (120 bytes)
 0x0000(0) : 00 00 00 00 00 00 00 00 00 00 00 00 08 00 45 00 
0x0010(16) : 00 6a 59 b1 40 00 40 11 e2 cf 7f 00 00 01 7f 00 
0x0020(32) : 00 01 b7 7c 2b cb 00 56 fe 69 00 01 00 00 00 01 
0x0030(48) : 01 00 67 65 74 20 10 10 10 10 10 10 10 10 61 31 
0x0040(64) : 4c 48 4c 7a 42 61 76 49 72 30 39 38 43 79 74 2d 
0x0050(80) : 2e 34 77 4d 67 6c 54 56 79 70 35 66 46 66 68 61 
0x0060(96) : 77 30 59 35 61 52 4f 51 52 58 59 64 55 50 63 53 
0x0070(112) : 54 57 6f 37 46 46 0d 0a 
Exiting system XilinxSwitch
===================================================================
Evaluating packet #2(1160 bytes)
 0x0000(0) : 00 00 00 00 00 00 00 00 00 00 00 00 08 00 45 00 
0x0010(16) : 04 7a 59 b2 40 00 40 11 de be 7f 00 00 01 7f 00 
0x0020(32) : 00 01 2b cb b7 7c 04 66 02 7a 00 01 00 00 00 01 
0x0030(48) : 00 00 56 41 4c 55 45 20 10 10 10 10 10 10 10 10 
0x0040(64) : 61 31 4c 48 4c 7a 42 61 76 49 72 30 39 38 43 79 
0x0050(80) : 74 2d 2e 34 77 4d 67 6c 54 56 79 70 35 66 46 66 
0x0060(96) : 68 61 77 30 59 35 61 52 4f 51 52 58 59 64 55 50 
0x0070(112) : 63 53 54 57 6f 37 46 46 20 30 20 31 30 32 34 0d 
0x0080(128) : 0a 61 31 4c 48 4c 7a 42 61 76 49 72 30 39 38 43 
0x0090(144) : 79 74 2d 2e 34 77 4d 67 6c 54 56 79 70 35 66 46 
0x00a0(160) : 66 68 61 77 30 59 35 61 52 4f 51 52 58 59 64 55 
0x00b0(176) : 50 63 53 54 57 6f 37 46 46 64 42 32 69 72 49 4c 
0x00c0(192) : 57 73 46 57 4f 4c 35 70 6a 56 45 45 31 72 69 51 
0x00d0(208) : 52 38 74 78 78 2d 41 41 63 4d 44 49 42 56 64 68 
0x00e0(224) : 4c 73 42 6b 42 47 58 75 6c 6d 37 6d 62 70 41 31 
0x00f0(240) : 79 32 79 74 31 37 31 64 54 45 76 65 6a 57 4a 33 
0x0100(256) : 4d 55 6e 59 6c 49 51 55 32 58 46 65 4c 50 66 48 
0x0110(272) : 52 62 38 53 69 39 33 39 4f 79 6e 35 53 34 38 70 
0x0120(288) : 5a 76 4c 49 43 6c 6d 45 48 2d 73 63 50 56 74 71 
0x0130(304) : 35 2d 48 6e 38 4b 78 57 48 69 63 6a 6e 6b 57 4b 
0x0140(320) : 65 72 63 71 62 4d 32 73 4d 76 53 6c 4f 4a 5a 54 
0x0150(336) : 49 71 46 51 39 41 78 51 73 58 37 64 46 65 78 74 
0x0160(352) : 54 58 68 32 75 6b 75 45 64 4b 7a 2d 64 57 54 76 
0x0170(368) : 4c 69 4b 55 73 46 75 69 6d 2d 4b 2d 64 46 74 35 
0x0180(384) : 6e 59 37 66 47 30 74 74 4b 71 74 79 4b 4b 72 66 
0x0190(400) : 30 39 37 73 4f 2d 59 38 2d 73 38 63 36 2d 68 74 
0x01a0(416) : 58 70 57 6f 70 4e 66 37 42 57 33 56 71 76 39 71 
0x01b0(432) : 32 47 67 52 47 44 5a 46 33 68 72 39 67 58 30 43 
0x01c0(448) : 4b 57 2e 37 74 64 45 32 38 49 59 79 42 68 6e 44 
0x01d0(464) : 78 52 65 42 65 43 51 69 74 47 72 59 6e 73 6b 35 
0x01e0(480) : 4d 69 43 45 4a 51 47 52 69 6f 4f 74 54 39 35 50 
0x01f0(496) : 61 6a 61 44 76 2d 76 6e 46 6b 4a 30 61 31 35 78 
0x0200(512) : 6a 48 39 30 68 50 53 4f 43 71 46 66 7a 4b 32 58 
0x0210(528) : 32 64 6b 78 63 64 69 72 4d 2d 72 77 30 77 72 6a 
0x0220(544) : 42 2e 6b 73 4f 41 45 61 2e 55 44 78 6f 47 53 71 
0x0230(560) : 74 42 6d 54 6f 53 49 38 53 37 33 53 31 75 41 43 
0x0240(576) : 74 75 32 46 32 48 70 30 6c 30 78 58 47 4e 4d 37 
0x0250(592) : 59 36 61 4c 59 73 54 2e 7a 57 52 2e 50 62 41 47 
0x0260(608) : 54 44 56 56 55 49 56 44 49 51 6b 5a 6e 34 67 4b 
0x0270(624) : 41 46 66 6a 35 36 68 33 64 36 31 30 68 43 47 38 
0x0280(640) : 50 6c 64 74 31 36 34 4a 57 6f 73 49 74 58 63 31 
0x0290(656) : 6d 46 6b 72 4c 51 75 79 57 77 79 43 36 43 4b 56 
0x02a0(672) : 78 79 4d 79 32 51 47 5a 43 36 72 33 64 52 35 4e 
0x02b0(688) : 67 70 44 2d 44 35 79 6b 2d 75 77 35 35 45 61 30 
0x02c0(704) : 41 77 7a 44 4b 44 6d 58 4a 62 61 78 30 66 49 67 
0x02d0(720) : 54 56 66 67 62 62 4f 61 55 49 67 5a 58 45 5a 68 
0x02e0(736) : 39 57 75 54 6a 65 2e 31 44 5a 79 44 43 45 74 66 
0x02f0(752) : 6b 58 4b 4a 36 69 74 61 2d 58 37 57 6d 68 42 76 
0x0300(768) : 42 34 4d 76 69 4c 77 77 75 73 37 34 34 2d 6b 6f 
0x0310(784) : 57 32 35 63 6b 7a 42 6a 55 49 44 45 7a 50 37 39 
0x0320(800) : 54 55 32 39 70 79 33 68 6f 42 6c 73 41 54 66 67 
0x0330(816) : 56 6b 47 45 68 52 78 41 6b 39 4f 68 59 57 71 2d 
0x0340(832) : 2e 73 38 6e 6f 43 53 61 4e 42 52 58 66 34 42 38 
0x0350(848) : 6f 52 4d 55 74 49 65 62 52 30 47 7a 57 35 79 55 
0x0360(864) : 78 34 46 6b 47 68 49 64 74 6a 38 57 6e 4a 65 61 
0x0370(880) : 6c 2d 32 63 48 67 42 69 67 52 66 42 57 62 66 53 
0x0380(896) : 66 76 41 77 61 53 58 52 41 67 78 78 7a 61 56 69 
0x0390(912) : 5a 58 49 71 42 54 57 73 76 39 31 50 6b 67 72 4e 
0x03a0(928) : 5a 2d 48 38 53 70 5a 63 54 56 58 51 33 31 37 63 
0x03b0(944) : 59 50 51 6b 74 77 61 6d 33 62 39 6e 46 2d 38 70 
0x03c0(960) : 2e 51 78 51 44 55 30 67 7a 59 34 30 5a 42 63 35 
0x03d0(976) : 62 30 70 53 77 4e 43 7a 79 4c 6b 43 4b 74 2d 4a 
0x03e0(992) : 48 77 6a 55 4f 6b 38 4d 47 43 4d 70 4f 7a 75 7a 
0x03f0(1008) : 7a 69 50 75 33 62 72 30 77 61 43 46 52 42 59 69 
0x0400(1024) : 35 46 41 54 7a 49 70 44 55 41 30 73 37 76 70 34 
0x0410(1040) : 62 43 79 65 6e 6f 65 69 4d 71 78 6e 2d 54 54 34 
0x0420(1056) : 69 64 59 67 76 4c 74 4e 56 75 45 63 6e 31 68 4d 
0x0430(1072) : 45 64 2e 2d 50 64 68 6c 52 63 57 52 33 7a 56 6d 
0x0440(1088) : 61 31 51 54 4e 48 72 73 39 33 54 77 34 38 47 49 
0x0450(1104) : 6c 46 49 39 73 7a 75 48 61 50 69 64 4d 43 4e 78 
0x0460(1120) : 44 6e 4f 61 33 44 52 43 47 75 37 4c 30 4e 64 6c 
0x0470(1136) : 63 76 75 53 74 6e 6b 52 41 51 32 57 63 51 52 71 
0x0480(1152) : 42 0d 0a 45 4e 44 0d 0a 
===================================================================
Entering system XilinxSwitch
input packet (1160 bytes)
 0x0000(0) : 00 00 00 00 00 00 00 00 00 00 00 00 08 00 45 00 
0x0010(16) : 04 7a 59 b2 40 00 40 11 de be 7f 00 00 01 7f 00 
0x0020(32) : 00 01 2b cb b7 7c 04 66 02 7a 00 01 00 00 00 01 
0x0030(48) : 00 00 56 41 4c 55 45 20 10 10 10 10 10 10 10 10 
0x0040(64) : 61 31 4c 48 4c 7a 42 61 76 49 72 30 39 38 43 79 
0x0050(80) : 74 2d 2e 34 77 4d 67 6c 54 56 79 70 35 66 46 66 
0x0060(96) : 68 61 77 30 59 35 61 52 4f 51 52 58 59 64 55 50 
0x0070(112) : 63 53 54 57 6f 37 46 46 20 30 20 31 30 32 34 0d 
0x0080(128) : 0a 61 31 4c 48 4c 7a 42 61 76 49 72 30 39 38 43 
0x0090(144) : 79 74 2d 2e 34 77 4d 67 6c 54 56 79 70 35 66 46 
0x00a0(160) : 66 68 61 77 30 59 35 61 52 4f 51 52 58 59 64 55 
0x00b0(176) : 50 63 53 54 57 6f 37 46 46 64 42 32 69 72 49 4c 
0x00c0(192) : 57 73 46 57 4f 4c 35 70 6a 56 45 45 31 72 69 51 
0x00d0(208) : 52 38 74 78 78 2d 41 41 63 4d 44 49 42 56 64 68 
0x00e0(224) : 4c 73 42 6b 42 47 58 75 6c 6d 37 6d 62 70 41 31 
0x00f0(240) : 79 32 79 74 31 37 31 64 54 45 76 65 6a 57 4a 33 
0x0100(256) : 4d 55 6e 59 6c 49 51 55 32 58 46 65 4c 50 66 48 
0x0110(272) : 52 62 38 53 69 39 33 39 4f 79 6e 35 53 34 38 70 
0x0120(288) : 5a 76 4c 49 43 6c 6d 45 48 2d 73 63 50 56 74 71 
0x0130(304) : 35 2d 48 6e 38 4b 78 57 48 69 63 6a 6e 6b 57 4b 
0x0140(320) : 65 72 63 71 62 4d 32 73 4d 76 53 6c 4f 4a 5a 54 
0x0150(336) : 49 71 46 51 39 41 78 51 73 58 37 64 46 65 78 74 
0x0160(352) : 54 58 68 32 75 6b 75 45 64 4b 7a 2d 64 57 54 76 
0x0170(368) : 4c 69 4b 55 73 46 75 69 6d 2d 4b 2d 64 46 74 35 
0x0180(384) : 6e 59 37 66 47 30 74 74 4b 71 74 79 4b 4b 72 66 
0x0190(400) : 30 39 37 73 4f 2d 59 38 2d 73 38 63 36 2d 68 74 
0x01a0(416) : 58 70 57 6f 70 4e 66 37 42 57 33 56 71 76 39 71 
0x01b0(432) : 32 47 67 52 47 44 5a 46 33 68 72 39 67 58 30 43 
0x01c0(448) : 4b 57 2e 37 74 64 45 32 38 49 59 79 42 68 6e 44 
0x01d0(464) : 78 52 65 42 65 43 51 69 74 47 72 59 6e 73 6b 35 
0x01e0(480) : 4d 69 43 45 4a 51 47 52 69 6f 4f 74 54 39 35 50 
0x01f0(496) : 61 6a 61 44 76 2d 76 6e 46 6b 4a 30 61 31 35 78 
0x0200(512) : 6a 48 39 30 68 50 53 4f 43 71 46 66 7a 4b 32 58 
0x0210(528) : 32 64 6b 78 63 64 69 72 4d 2d 72 77 30 77 72 6a 
0x0220(544) : 42 2e 6b 73 4f 41 45 61 2e 55 44 78 6f 47 53 71 
0x0230(560) : 74 42 6d 54 6f 53 49 38 53 37 33 53 31 75 41 43 
0x0240(576) : 74 75 32 46 32 48 70 30 6c 30 78 58 47 4e 4d 37 
0x0250(592) : 59 36 61 4c 59 73 54 2e 7a 57 52 2e 50 62 41 47 
0x0260(608) : 54 44 56 56 55 49 56 44 49 51 6b 5a 6e 34 67 4b 
0x0270(624) : 41 46 66 6a 35 36 68 33 64 36 31 30 68 43 47 38 
0x0280(640) : 50 6c 64 74 31 36 34 4a 57 6f 73 49 74 58 63 31 
0x0290(656) : 6d 46 6b 72 4c 51 75 79 57 77 79 43 36 43 4b 56 
0x02a0(672) : 78 79 4d 79 32 51 47 5a 43 36 72 33 64 52 35 4e 
0x02b0(688) : 67 70 44 2d 44 35 79 6b 2d 75 77 35 35 45 61 30 
0x02c0(704) : 41 77 7a 44 4b 44 6d 58 4a 62 61 78 30 66 49 67 
0x02d0(720) : 54 56 66 67 62 62 4f 61 55 49 67 5a 58 45 5a 68 
0x02e0(736) : 39 57 75 54 6a 65 2e 31 44 5a 79 44 43 45 74 66 
0x02f0(752) : 6b 58 4b 4a 36 69 74 61 2d 58 37 57 6d 68 42 76 
0x0300(768) : 42 34 4d 76 69 4c 77 77 75 73 37 34 34 2d 6b 6f 
0x0310(784) : 57 32 35 63 6b 7a 42 6a 55 49 44 45 7a 50 37 39 
0x0320(800) : 54 55 32 39 70 79 33 68 6f 42 6c 73 41 54 66 67 
0x0330(816) : 56 6b 47 45 68 52 78 41 6b 39 4f 68 59 57 71 2d 
0x0340(832) : 2e 73 38 6e 6f 43 53 61 4e 42 52 58 66 34 42 38 
0x0350(848) : 6f 52 4d 55 74 49 65 62 52 30 47 7a 57 35 79 55 
0x0360(864) : 78 34 46 6b 47 68 49 64 74 6a 38 57 6e 4a 65 61 
0x0370(880) : 6c 2d 32 63 48 67 42 69 67 52 66 42 57 62 66 53 
0x0380(896) : 66 76 41 77 61 53 58 52 41 67 78 78 7a 61 56 69 
0x0390(912) : 5a 58 49 71 42 54 57 73 76 39 31 50 6b 67 72 4e 
0x03a0(928) : 5a 2d 48 38 53 70 5a 63 54 56 58 51 33 31 37 63 
0x03b0(944) : 59 50 51 6b 74 77 61 6d 33 62 39 6e 46 2d 38 70 
0x03c0(960) : 2e 51 78 51 44 55 30 67 7a 59 34 30 5a 42 63 35 
0x03d0(976) : 62 30 70 53 77 4e 43 7a 79 4c 6b 43 4b 74 2d 4a 
0x03e0(992) : 48 77 6a 55 4f 6b 38 4d 47 43 4d 70 4f 7a 75 7a 
0x03f0(1008) : 7a 69 50 75 33 62 72 30 77 61 43 46 52 42 59 69 
0x0400(1024) : 35 46 41 54 7a 49 70 44 55 41 30 73 37 76 70 34 
0x0410(1040) : 62 43 79 65 6e 6f 65 69 4d 71 78 6e 2d 54 54 34 
0x0420(1056) : 69 64 59 67 76 4c 74 4e 56 75 45 63 6e 31 68 4d 
0x0430(1072) : 45 64 2e 2d 50 64 68 6c 52 63 57 52 33 7a 56 6d 
0x0440(1088) : 61 31 51 54 4e 48 72 73 39 33 54 77 34 38 47 49 
0x0450(1104) : 6c 46 49 39 73 7a 75 48 61 50 69 64 4d 43 4e 78 
0x0460(1120) : 44 6e 4f 61 33 44 52 43 47 75 37 4c 30 4e 64 6c 
0x0470(1136) : 63 76 75 53 74 6e 6b 52 41 51 32 57 63 51 52 71 
0x0480(1152) : 42 0d 0a 45 4e 44 0d 0a 
initial input and inout tuples:
	ioports = (
		ingress_port = 0x0(0)
		egress_port = 0x0(0)
	)
clear internal and output-only tuples
===================================================================
Entering engine Parser
input packet (1160 bytes)
 0x0000(0) : 00 00 00 00 00 00 00 00 00 00 00 00 08 00 45 00 
0x0010(16) : 04 7a 59 b2 40 00 40 11 de be 7f 00 00 01 7f 00 
0x0020(32) : 00 01 2b cb b7 7c 04 66 02 7a 00 01 00 00 00 01 
0x0030(48) : 00 00 56 41 4c 55 45 20 10 10 10 10 10 10 10 10 
0x0040(64) : 61 31 4c 48 4c 7a 42 61 76 49 72 30 39 38 43 79 
0x0050(80) : 74 2d 2e 34 77 4d 67 6c 54 56 79 70 35 66 46 66 
0x0060(96) : 68 61 77 30 59 35 61 52 4f 51 52 58 59 64 55 50 
0x0070(112) : 63 53 54 57 6f 37 46 46 20 30 20 31 30 32 34 0d 
0x0080(128) : 0a 61 31 4c 48 4c 7a 42 61 76 49 72 30 39 38 43 
0x0090(144) : 79 74 2d 2e 34 77 4d 67 6c 54 56 79 70 35 66 46 
0x00a0(160) : 66 68 61 77 30 59 35 61 52 4f 51 52 58 59 64 55 
0x00b0(176) : 50 63 53 54 57 6f 37 46 46 64 42 32 69 72 49 4c 
0x00c0(192) : 57 73 46 57 4f 4c 35 70 6a 56 45 45 31 72 69 51 
0x00d0(208) : 52 38 74 78 78 2d 41 41 63 4d 44 49 42 56 64 68 
0x00e0(224) : 4c 73 42 6b 42 47 58 75 6c 6d 37 6d 62 70 41 31 
0x00f0(240) : 79 32 79 74 31 37 31 64 54 45 76 65 6a 57 4a 33 
0x0100(256) : 4d 55 6e 59 6c 49 51 55 32 58 46 65 4c 50 66 48 
0x0110(272) : 52 62 38 53 69 39 33 39 4f 79 6e 35 53 34 38 70 
0x0120(288) : 5a 76 4c 49 43 6c 6d 45 48 2d 73 63 50 56 74 71 
0x0130(304) : 35 2d 48 6e 38 4b 78 57 48 69 63 6a 6e 6b 57 4b 
0x0140(320) : 65 72 63 71 62 4d 32 73 4d 76 53 6c 4f 4a 5a 54 
0x0150(336) : 49 71 46 51 39 41 78 51 73 58 37 64 46 65 78 74 
0x0160(352) : 54 58 68 32 75 6b 75 45 64 4b 7a 2d 64 57 54 76 
0x0170(368) : 4c 69 4b 55 73 46 75 69 6d 2d 4b 2d 64 46 74 35 
0x0180(384) : 6e 59 37 66 47 30 74 74 4b 71 74 79 4b 4b 72 66 
0x0190(400) : 30 39 37 73 4f 2d 59 38 2d 73 38 63 36 2d 68 74 
0x01a0(416) : 58 70 57 6f 70 4e 66 37 42 57 33 56 71 76 39 71 
0x01b0(432) : 32 47 67 52 47 44 5a 46 33 68 72 39 67 58 30 43 
0x01c0(448) : 4b 57 2e 37 74 64 45 32 38 49 59 79 42 68 6e 44 
0x01d0(464) : 78 52 65 42 65 43 51 69 74 47 72 59 6e 73 6b 35 
0x01e0(480) : 4d 69 43 45 4a 51 47 52 69 6f 4f 74 54 39 35 50 
0x01f0(496) : 61 6a 61 44 76 2d 76 6e 46 6b 4a 30 61 31 35 78 
0x0200(512) : 6a 48 39 30 68 50 53 4f 43 71 46 66 7a 4b 32 58 
0x0210(528) : 32 64 6b 78 63 64 69 72 4d 2d 72 77 30 77 72 6a 
0x0220(544) : 42 2e 6b 73 4f 41 45 61 2e 55 44 78 6f 47 53 71 
0x0230(560) : 74 42 6d 54 6f 53 49 38 53 37 33 53 31 75 41 43 
0x0240(576) : 74 75 32 46 32 48 70 30 6c 30 78 58 47 4e 4d 37 
0x0250(592) : 59 36 61 4c 59 73 54 2e 7a 57 52 2e 50 62 41 47 
0x0260(608) : 54 44 56 56 55 49 56 44 49 51 6b 5a 6e 34 67 4b 
0x0270(624) : 41 46 66 6a 35 36 68 33 64 36 31 30 68 43 47 38 
0x0280(640) : 50 6c 64 74 31 36 34 4a 57 6f 73 49 74 58 63 31 
0x0290(656) : 6d 46 6b 72 4c 51 75 79 57 77 79 43 36 43 4b 56 
0x02a0(672) : 78 79 4d 79 32 51 47 5a 43 36 72 33 64 52 35 4e 
0x02b0(688) : 67 70 44 2d 44 35 79 6b 2d 75 77 35 35 45 61 30 
0x02c0(704) : 41 77 7a 44 4b 44 6d 58 4a 62 61 78 30 66 49 67 
0x02d0(720) : 54 56 66 67 62 62 4f 61 55 49 67 5a 58 45 5a 68 
0x02e0(736) : 39 57 75 54 6a 65 2e 31 44 5a 79 44 43 45 74 66 
0x02f0(752) : 6b 58 4b 4a 36 69 74 61 2d 58 37 57 6d 68 42 76 
0x0300(768) : 42 34 4d 76 69 4c 77 77 75 73 37 34 34 2d 6b 6f 
0x0310(784) : 57 32 35 63 6b 7a 42 6a 55 49 44 45 7a 50 37 39 
0x0320(800) : 54 55 32 39 70 79 33 68 6f 42 6c 73 41 54 66 67 
0x0330(816) : 56 6b 47 45 68 52 78 41 6b 39 4f 68 59 57 71 2d 
0x0340(832) : 2e 73 38 6e 6f 43 53 61 4e 42 52 58 66 34 42 38 
0x0350(848) : 6f 52 4d 55 74 49 65 62 52 30 47 7a 57 35 79 55 
0x0360(864) : 78 34 46 6b 47 68 49 64 74 6a 38 57 6e 4a 65 61 
0x0370(880) : 6c 2d 32 63 48 67 42 69 67 52 66 42 57 62 66 53 
0x0380(896) : 66 76 41 77 61 53 58 52 41 67 78 78 7a 61 56 69 
0x0390(912) : 5a 58 49 71 42 54 57 73 76 39 31 50 6b 67 72 4e 
0x03a0(928) : 5a 2d 48 38 53 70 5a 63 54 56 58 51 33 31 37 63 
0x03b0(944) : 59 50 51 6b 74 77 61 6d 33 62 39 6e 46 2d 38 70 
0x03c0(960) : 2e 51 78 51 44 55 30 67 7a 59 34 30 5a 42 63 35 
0x03d0(976) : 62 30 70 53 77 4e 43 7a 79 4c 6b 43 4b 74 2d 4a 
0x03e0(992) : 48 77 6a 55 4f 6b 38 4d 47 43 4d 70 4f 7a 75 7a 
0x03f0(1008) : 7a 69 50 75 33 62 72 30 77 61 43 46 52 42 59 69 
0x0400(1024) : 35 46 41 54 7a 49 70 44 55 41 30 73 37 76 70 34 
0x0410(1040) : 62 43 79 65 6e 6f 65 69 4d 71 78 6e 2d 54 54 34 
0x0420(1056) : 69 64 59 67 76 4c 74 4e 56 75 45 63 6e 31 68 4d 
0x0430(1072) : 45 64 2e 2d 50 64 68 6c 52 63 57 52 33 7a 56 6d 
0x0440(1088) : 61 31 51 54 4e 48 72 73 39 33 54 77 34 38 47 49 
0x0450(1104) : 6c 46 49 39 73 7a 75 48 61 50 69 64 4d 43 4e 78 
0x0460(1120) : 44 6e 4f 61 33 44 52 43 47 75 37 4c 30 4e 64 6c 
0x0470(1136) : 63 76 75 53 74 6e 6b 52 41 51 32 57 63 51 52 71 
0x0480(1152) : 42 0d 0a 45 4e 44 0d 0a 
initial input and inout tuples:
	control = (
		offset = 0x0000(0)
		virtual_offset = 0x0000(0)
		section = 0x0(0)
		activeBank = 0x0(0)
		done = 0x0(0)
		error = 0x0(0)
	)
clear internal and output-only tuples
	hdr = (
		eth = (
		isValid = 0x0(0)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0000(0)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x0(0)
		version = 0x0(0)
		ihl = 0x0(0)
		diffserv = 0x00(0)
		totallen = 0x0000(0)
		identification = 0x0000(0)
		flags = 0x0(0)
		fragoffset = 0x0000(0)
		ttl = 0x00(0)
		protocol = 0x00(0)
		hdrchecksum = 0x0000(0)
		srcAddr = 0x00000000(0)
		dstAddr = 0x00000000(0)
	)
		udp = (
		isValid = 0x0(0)
		sport = 0x0000(0)
		dport = 0x0000(0)
		len = 0x0000(0)
		chksum = 0x0000(0)
	)
	)
	Parser_extracts = (
		size = 0x00000000(0)
	)
processing section start in stage 1
-------------------------------------------------------------------
Section start starting

	extracting 112 bits at offset 0x0000(0)
		dst_0 = 0x000000000000(0)
		src_0 = 0x000000000000(0)
		type_0 = 0x0800(2048)

	method update (tuples)
		hdr.eth.isValid = 0x1(1)
		hdr.eth.dst = 0x000000000000(0)
		hdr.eth.src = 0x000000000000(0)
		hdr.eth.type = 0x0800(2048)
		Parser_extracts.size = 0x00000070(112)


	method move_to_section = parse_ipv4

updated tuples:
	control = (
		offset = 0x0070(112)
		virtual_offset = 0x0070(112)
		section = 0x2(2)
		activeBank = 0x0(0)
		done = 0x0(0)
		error = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x0(0)
		version = 0x0(0)
		ihl = 0x0(0)
		diffserv = 0x00(0)
		totallen = 0x0000(0)
		identification = 0x0000(0)
		flags = 0x0(0)
		fragoffset = 0x0000(0)
		ttl = 0x00(0)
		protocol = 0x00(0)
		hdrchecksum = 0x0000(0)
		srcAddr = 0x00000000(0)
		dstAddr = 0x00000000(0)
	)
		udp = (
		isValid = 0x0(0)
		sport = 0x0000(0)
		dport = 0x0000(0)
		len = 0x0000(0)
		chksum = 0x0000(0)
	)
	)
	Parser_extracts = (
		size = 0x00000070(112)
	)
Section start finished
-------------------------------------------------------------------
processing section parse_ipv4 in stage 2
-------------------------------------------------------------------
Section parse_ipv4 starting

	extracting 160 bits at offset 0x0070(112)
		version_0 = 0x4(4)
		ihl_0 = 0x5(5)
		diffserv_0 = 0x00(0)
		totallen_0 = 0x047a(1146)
		identification_0 = 0x59b2(22962)
		flags_0 = 0x2(2)
		fragoffset_0 = 0x0000(0)
		ttl_0 = 0x40(64)
		protocol_0 = 0x11(17)
		hdrchecksum_0 = 0xdebe(57022)
		srcAddr_0 = 0x7f000001(2130706433)
		dstAddr_0 = 0x7f000001(2130706433)

	method update (tuples)
		hdr.ipv4.isValid = 0x1(1)
		hdr.ipv4.version = 0x4(4)
		hdr.ipv4.ihl = 0x5(5)
		hdr.ipv4.diffserv = 0x00(0)
		hdr.ipv4.totallen = 0x047a(1146)
		hdr.ipv4.identification = 0x59b2(22962)
		hdr.ipv4.flags = 0x2(2)
		hdr.ipv4.fragoffset = 0x0000(0)
		hdr.ipv4.ttl = 0x40(64)
		hdr.ipv4.protocol = 0x11(17)
		hdr.ipv4.hdrchecksum = 0xdebe(57022)
		hdr.ipv4.srcAddr = 0x7f000001(2130706433)
		hdr.ipv4.dstAddr = 0x7f000001(2130706433)
		Parser_extracts.size = 0x00000110(272)


	method move_to_section = parse_udp

updated tuples:
	control = (
		offset = 0x0110(272)
		virtual_offset = 0x0110(272)
		section = 0x3(3)
		activeBank = 0x0(0)
		done = 0x0(0)
		error = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x047a(1146)
		identification = 0x59b2(22962)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xdebe(57022)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x0(0)
		sport = 0x0000(0)
		dport = 0x0000(0)
		len = 0x0000(0)
		chksum = 0x0000(0)
	)
	)
	Parser_extracts = (
		size = 0x00000110(272)
	)
Section parse_ipv4 finished
-------------------------------------------------------------------
processing section parse_udp in stage 3
-------------------------------------------------------------------
Section parse_udp starting

	extracting 64 bits at offset 0x0110(272)
		sport_0 = 0x2bcb(11211)
		dport_0 = 0xb77c(46972)
		len_0 = 0x0466(1126)
		chksum_0 = 0x027a(634)

	method update (tuples)
		hdr.udp.isValid = 0x1(1)
		hdr.udp.sport = 0x2bcb(11211)
		hdr.udp.dport = 0xb77c(46972)
		hdr.udp.len = 0x0466(1126)
		hdr.udp.chksum = 0x027a(634)
		Parser_extracts.size = 0x00000150(336)


	method move_to_section = accept

updated tuples:
	control = (
		offset = 0x0150(336)
		virtual_offset = 0x0150(336)
		section = 0x4(4)
		activeBank = 0x0(0)
		done = 0x0(0)
		error = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x047a(1146)
		identification = 0x59b2(22962)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xdebe(57022)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0x2bcb(11211)
		dport = 0xb77c(46972)
		len = 0x0466(1126)
		chksum = 0x027a(634)
	)
	)
	Parser_extracts = (
		size = 0x00000150(336)
	)
Section parse_udp finished
-------------------------------------------------------------------
processing section accept in stage 4
-------------------------------------------------------------------
Section accept starting


	method move_to_section = done(0)

updated tuples:
	control = (
		offset = 0x0150(336)
		virtual_offset = 0x0150(336)
		section = 0x0(0)
		activeBank = 0x0(0)
		done = 0x1(1)
		error = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x047a(1146)
		identification = 0x59b2(22962)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xdebe(57022)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0x2bcb(11211)
		dport = 0xb77c(46972)
		len = 0x0466(1126)
		chksum = 0x027a(634)
	)
	)
	Parser_extracts = (
		size = 0x00000150(336)
	)
Section accept finished
-------------------------------------------------------------------
final inout and output tuples:

Note: this engine's wrapper will clear the upper control tuple fields on output, except for the 'control.error' field.

	control = (
		offset = 0x0000(0)
		virtual_offset = 0x0000(0)
		section = 0x0(0)
		activeBank = 0x0(0)
		done = 0x0(0)
		error = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x047a(1146)
		identification = 0x59b2(22962)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xdebe(57022)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0x2bcb(11211)
		dport = 0xb77c(46972)
		len = 0x0466(1126)
		chksum = 0x027a(634)
	)
	)
	Parser_extracts = (
		size = 0x00000150(336)
	)
Exiting engine Parser
===================================================================
===================================================================
Entering engine CheckCache_lvl
input packet (0 bytes)
initial input and inout tuples:
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x047a(1146)
		identification = 0x59b2(22962)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xdebe(57022)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0x2bcb(11211)
		dport = 0xb77c(46972)
		len = 0x0466(1126)
		chksum = 0x027a(634)
	)
	)
	ioports = (
		ingress_port = 0x0(0)
		egress_port = 0x0(0)
	)
clear internal and output-only tuples
	control = (
		offset = 0x0000(0)
		virtual_offset = 0x0000(0)
		section = 0x0(0)
		activeBank = 0x0(0)
		done = 0x0(0)
		error = 0x0(0)
	)
	CheckCache_fl = (
		forward_1 = 0x0(0)
	)
	local_state = (
		id = 0x0000(0)
	)
processing section setup in stage 1
-------------------------------------------------------------------
Section setup starting


	method move_to_section = done(0)

updated tuples:
	control = (
		offset = 0x0000(0)
		virtual_offset = 0x0000(0)
		section = 0x0(0)
		activeBank = 0x0(0)
		done = 0x1(1)
		error = 0x0(0)
	)
	CheckCache_fl = (
		forward_1 = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x047a(1146)
		identification = 0x59b2(22962)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xdebe(57022)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0x2bcb(11211)
		dport = 0xb77c(46972)
		len = 0x0466(1126)
		chksum = 0x027a(634)
	)
	)
	ioports = (
		ingress_port = 0x0(0)
		egress_port = 0x0(0)
	)
	local_state = (
		id = 0x0000(0)
	)
Section setup finished
-------------------------------------------------------------------
final inout and output tuples:

Note: this engine's wrapper will clear the upper control tuple fields on output, except for the 'control.error' field.

	CheckCache_fl = (
		forward_1 = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x047a(1146)
		identification = 0x59b2(22962)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xdebe(57022)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0x2bcb(11211)
		dport = 0xb77c(46972)
		len = 0x0466(1126)
		chksum = 0x027a(634)
	)
	)
	ioports = (
		ingress_port = 0x0(0)
		egress_port = 0x0(0)
	)
	local_state = (
		id = 0x0000(0)
	)
Exiting engine CheckCache_lvl
===================================================================
===================================================================
Entering engine CheckCache_lvl_0
input packet (0 bytes)
initial input and inout tuples:
	CheckCache_fl = (
		forward_1 = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x047a(1146)
		identification = 0x59b2(22962)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xdebe(57022)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0x2bcb(11211)
		dport = 0xb77c(46972)
		len = 0x0466(1126)
		chksum = 0x027a(634)
	)
	)
	ioports = (
		ingress_port = 0x0(0)
		egress_port = 0x0(0)
	)
	local_state = (
		id = 0x0000(0)
	)
clear internal and output-only tuples
	control = (
		offset = 0x0000(0)
		virtual_offset = 0x0000(0)
		section = 0x0(0)
		activeBank = 0x0(0)
		done = 0x0(0)
		error = 0x0(0)
	)
	memcached_input = (
		stateful_valid = 0x0(0)
	)
processing section condition_sec_0 in stage 1
-------------------------------------------------------------------
Section condition_sec_0 starting

	method update (tuples)
		local_state.id = 0x0005(5)


	method move_to_section = condition_sec

updated tuples:
	control = (
		offset = 0x0000(0)
		virtual_offset = 0x0000(0)
		section = 0x2(2)
		activeBank = 0x0(0)
		done = 0x0(0)
		error = 0x0(0)
	)
	CheckCache_fl = (
		forward_1 = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x047a(1146)
		identification = 0x59b2(22962)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xdebe(57022)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0x2bcb(11211)
		dport = 0xb77c(46972)
		len = 0x0466(1126)
		chksum = 0x027a(634)
	)
	)
	ioports = (
		ingress_port = 0x0(0)
		egress_port = 0x0(0)
	)
	local_state = (
		id = 0x0005(5)
	)
	memcached_input = (
		stateful_valid = 0x0(0)
	)
Section condition_sec_0 finished
-------------------------------------------------------------------
processing section condition_sec in stage 2
-------------------------------------------------------------------
Section condition_sec starting

	method update (tuples)
		local_state.id = 0x0005(5)


	method move_to_section = act_0_sec

updated tuples:
	control = (
		offset = 0x0000(0)
		virtual_offset = 0x0000(0)
		section = 0x1(1)
		activeBank = 0x0(0)
		done = 0x0(0)
		error = 0x0(0)
	)
	CheckCache_fl = (
		forward_1 = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x047a(1146)
		identification = 0x59b2(22962)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xdebe(57022)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0x2bcb(11211)
		dport = 0xb77c(46972)
		len = 0x0466(1126)
		chksum = 0x027a(634)
	)
	)
	ioports = (
		ingress_port = 0x0(0)
		egress_port = 0x0(0)
	)
	local_state = (
		id = 0x0005(5)
	)
	memcached_input = (
		stateful_valid = 0x0(0)
	)
Section condition_sec finished
-------------------------------------------------------------------
processing section act_0_sec in stage 3
-------------------------------------------------------------------
Section act_0_sec starting

	method update (tuples)
		memcached_input.stateful_valid = 0x1(1)
		local_state.id = 0x0004(4)


	method move_to_section = local_end

updated tuples:
	control = (
		offset = 0x0000(0)
		virtual_offset = 0x0000(0)
		section = 0x4(4)
		activeBank = 0x0(0)
		done = 0x0(0)
		error = 0x0(0)
	)
	CheckCache_fl = (
		forward_1 = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x047a(1146)
		identification = 0x59b2(22962)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xdebe(57022)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0x2bcb(11211)
		dport = 0xb77c(46972)
		len = 0x0466(1126)
		chksum = 0x027a(634)
	)
	)
	ioports = (
		ingress_port = 0x0(0)
		egress_port = 0x0(0)
	)
	local_state = (
		id = 0x0004(4)
	)
	memcached_input = (
		stateful_valid = 0x1(1)
	)
Section act_0_sec finished
-------------------------------------------------------------------
processing section local_end in stage 4
-------------------------------------------------------------------
Section local_end starting


	method move_to_section = done(0)

updated tuples:
	control = (
		offset = 0x0000(0)
		virtual_offset = 0x0000(0)
		section = 0x0(0)
		activeBank = 0x0(0)
		done = 0x1(1)
		error = 0x0(0)
	)
	CheckCache_fl = (
		forward_1 = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x047a(1146)
		identification = 0x59b2(22962)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xdebe(57022)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0x2bcb(11211)
		dport = 0xb77c(46972)
		len = 0x0466(1126)
		chksum = 0x027a(634)
	)
	)
	ioports = (
		ingress_port = 0x0(0)
		egress_port = 0x0(0)
	)
	local_state = (
		id = 0x0004(4)
	)
	memcached_input = (
		stateful_valid = 0x1(1)
	)
Section local_end finished
-------------------------------------------------------------------
final inout and output tuples:

Note: this engine's wrapper will clear the upper control tuple fields on output, except for the 'control.error' field.

	CheckCache_fl = (
		forward_1 = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x047a(1146)
		identification = 0x59b2(22962)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xdebe(57022)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0x2bcb(11211)
		dport = 0xb77c(46972)
		len = 0x0466(1126)
		chksum = 0x027a(634)
	)
	)
	ioports = (
		ingress_port = 0x0(0)
		egress_port = 0x0(0)
	)
	local_state = (
		id = 0x0004(4)
	)
	memcached_input = (
		stateful_valid = 0x1(1)
	)
Exiting engine CheckCache_lvl_0
===================================================================
===================================================================
Entering engine memcached_0
input packet (1160 bytes)
 0x0000(0) : 00 00 00 00 00 00 00 00 00 00 00 00 08 00 45 00 
0x0010(16) : 04 7a 59 b2 40 00 40 11 de be 7f 00 00 01 7f 00 
0x0020(32) : 00 01 2b cb b7 7c 04 66 02 7a 00 01 00 00 00 01 
0x0030(48) : 00 00 56 41 4c 55 45 20 10 10 10 10 10 10 10 10 
0x0040(64) : 61 31 4c 48 4c 7a 42 61 76 49 72 30 39 38 43 79 
0x0050(80) : 74 2d 2e 34 77 4d 67 6c 54 56 79 70 35 66 46 66 
0x0060(96) : 68 61 77 30 59 35 61 52 4f 51 52 58 59 64 55 50 
0x0070(112) : 63 53 54 57 6f 37 46 46 20 30 20 31 30 32 34 0d 
0x0080(128) : 0a 61 31 4c 48 4c 7a 42 61 76 49 72 30 39 38 43 
0x0090(144) : 79 74 2d 2e 34 77 4d 67 6c 54 56 79 70 35 66 46 
0x00a0(160) : 66 68 61 77 30 59 35 61 52 4f 51 52 58 59 64 55 
0x00b0(176) : 50 63 53 54 57 6f 37 46 46 64 42 32 69 72 49 4c 
0x00c0(192) : 57 73 46 57 4f 4c 35 70 6a 56 45 45 31 72 69 51 
0x00d0(208) : 52 38 74 78 78 2d 41 41 63 4d 44 49 42 56 64 68 
0x00e0(224) : 4c 73 42 6b 42 47 58 75 6c 6d 37 6d 62 70 41 31 
0x00f0(240) : 79 32 79 74 31 37 31 64 54 45 76 65 6a 57 4a 33 
0x0100(256) : 4d 55 6e 59 6c 49 51 55 32 58 46 65 4c 50 66 48 
0x0110(272) : 52 62 38 53 69 39 33 39 4f 79 6e 35 53 34 38 70 
0x0120(288) : 5a 76 4c 49 43 6c 6d 45 48 2d 73 63 50 56 74 71 
0x0130(304) : 35 2d 48 6e 38 4b 78 57 48 69 63 6a 6e 6b 57 4b 
0x0140(320) : 65 72 63 71 62 4d 32 73 4d 76 53 6c 4f 4a 5a 54 
0x0150(336) : 49 71 46 51 39 41 78 51 73 58 37 64 46 65 78 74 
0x0160(352) : 54 58 68 32 75 6b 75 45 64 4b 7a 2d 64 57 54 76 
0x0170(368) : 4c 69 4b 55 73 46 75 69 6d 2d 4b 2d 64 46 74 35 
0x0180(384) : 6e 59 37 66 47 30 74 74 4b 71 74 79 4b 4b 72 66 
0x0190(400) : 30 39 37 73 4f 2d 59 38 2d 73 38 63 36 2d 68 74 
0x01a0(416) : 58 70 57 6f 70 4e 66 37 42 57 33 56 71 76 39 71 
0x01b0(432) : 32 47 67 52 47 44 5a 46 33 68 72 39 67 58 30 43 
0x01c0(448) : 4b 57 2e 37 74 64 45 32 38 49 59 79 42 68 6e 44 
0x01d0(464) : 78 52 65 42 65 43 51 69 74 47 72 59 6e 73 6b 35 
0x01e0(480) : 4d 69 43 45 4a 51 47 52 69 6f 4f 74 54 39 35 50 
0x01f0(496) : 61 6a 61 44 76 2d 76 6e 46 6b 4a 30 61 31 35 78 
0x0200(512) : 6a 48 39 30 68 50 53 4f 43 71 46 66 7a 4b 32 58 
0x0210(528) : 32 64 6b 78 63 64 69 72 4d 2d 72 77 30 77 72 6a 
0x0220(544) : 42 2e 6b 73 4f 41 45 61 2e 55 44 78 6f 47 53 71 
0x0230(560) : 74 42 6d 54 6f 53 49 38 53 37 33 53 31 75 41 43 
0x0240(576) : 74 75 32 46 32 48 70 30 6c 30 78 58 47 4e 4d 37 
0x0250(592) : 59 36 61 4c 59 73 54 2e 7a 57 52 2e 50 62 41 47 
0x0260(608) : 54 44 56 56 55 49 56 44 49 51 6b 5a 6e 34 67 4b 
0x0270(624) : 41 46 66 6a 35 36 68 33 64 36 31 30 68 43 47 38 
0x0280(640) : 50 6c 64 74 31 36 34 4a 57 6f 73 49 74 58 63 31 
0x0290(656) : 6d 46 6b 72 4c 51 75 79 57 77 79 43 36 43 4b 56 
0x02a0(672) : 78 79 4d 79 32 51 47 5a 43 36 72 33 64 52 35 4e 
0x02b0(688) : 67 70 44 2d 44 35 79 6b 2d 75 77 35 35 45 61 30 
0x02c0(704) : 41 77 7a 44 4b 44 6d 58 4a 62 61 78 30 66 49 67 
0x02d0(720) : 54 56 66 67 62 62 4f 61 55 49 67 5a 58 45 5a 68 
0x02e0(736) : 39 57 75 54 6a 65 2e 31 44 5a 79 44 43 45 74 66 
0x02f0(752) : 6b 58 4b 4a 36 69 74 61 2d 58 37 57 6d 68 42 76 
0x0300(768) : 42 34 4d 76 69 4c 77 77 75 73 37 34 34 2d 6b 6f 
0x0310(784) : 57 32 35 63 6b 7a 42 6a 55 49 44 45 7a 50 37 39 
0x0320(800) : 54 55 32 39 70 79 33 68 6f 42 6c 73 41 54 66 67 
0x0330(816) : 56 6b 47 45 68 52 78 41 6b 39 4f 68 59 57 71 2d 
0x0340(832) : 2e 73 38 6e 6f 43 53 61 4e 42 52 58 66 34 42 38 
0x0350(848) : 6f 52 4d 55 74 49 65 62 52 30 47 7a 57 35 79 55 
0x0360(864) : 78 34 46 6b 47 68 49 64 74 6a 38 57 6e 4a 65 61 
0x0370(880) : 6c 2d 32 63 48 67 42 69 67 52 66 42 57 62 66 53 
0x0380(896) : 66 76 41 77 61 53 58 52 41 67 78 78 7a 61 56 69 
0x0390(912) : 5a 58 49 71 42 54 57 73 76 39 31 50 6b 67 72 4e 
0x03a0(928) : 5a 2d 48 38 53 70 5a 63 54 56 58 51 33 31 37 63 
0x03b0(944) : 59 50 51 6b 74 77 61 6d 33 62 39 6e 46 2d 38 70 
0x03c0(960) : 2e 51 78 51 44 55 30 67 7a 59 34 30 5a 42 63 35 
0x03d0(976) : 62 30 70 53 77 4e 43 7a 79 4c 6b 43 4b 74 2d 4a 
0x03e0(992) : 48 77 6a 55 4f 6b 38 4d 47 43 4d 70 4f 7a 75 7a 
0x03f0(1008) : 7a 69 50 75 33 62 72 30 77 61 43 46 52 42 59 69 
0x0400(1024) : 35 46 41 54 7a 49 70 44 55 41 30 73 37 76 70 34 
0x0410(1040) : 62 43 79 65 6e 6f 65 69 4d 71 78 6e 2d 54 54 34 
0x0420(1056) : 69 64 59 67 76 4c 74 4e 56 75 45 63 6e 31 68 4d 
0x0430(1072) : 45 64 2e 2d 50 64 68 6c 52 63 57 52 33 7a 56 6d 
0x0440(1088) : 61 31 51 54 4e 48 72 73 39 33 54 77 34 38 47 49 
0x0450(1104) : 6c 46 49 39 73 7a 75 48 61 50 69 64 4d 43 4e 78 
0x0460(1120) : 44 6e 4f 61 33 44 52 43 47 75 37 4c 30 4e 64 6c 
0x0470(1136) : 63 76 75 53 74 6e 6b 52 41 51 32 57 63 51 52 71 
0x0480(1152) : 42 0d 0a 45 4e 44 0d 0a 
initial input and inout tuples:
	control = (
		offset = 0x0000(0)
		virtual_offset = 0x0000(0)
		section = 0x0(0)
		activeBank = 0x0(0)
		done = 0x0(0)
		error = 0x0(0)
	)
	CheckCache_fl = (
		forward_1 = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x047a(1146)
		identification = 0x59b2(22962)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xdebe(57022)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0x2bcb(11211)
		dport = 0xb77c(46972)
		len = 0x0466(1126)
		chksum = 0x027a(634)
	)
	)
	ioports = (
		ingress_port = 0x0(0)
		egress_port = 0x0(0)
	)
	local_state = (
		id = 0x0004(4)
	)
	Parser_extracts = (
		size = 0x00000150(336)
	)
	memcached_input = (
		stateful_valid = 0x1(1)
	)
clear internal and output-only tuples
	memcached_output = (
		forward = 0x0(0)
	)
Enter USER ENGINE FUNCTION
0
134235392
322668945423220753
16050405759971852032
329628933424230
178455139529523201
94838453519648
1157442765409226768
7003462768942269025
8523469321219359609
8371398085226358636
6077178270022256230
7521423902224245074
5715439941520217424
7157156967326631494
2319389203729888269
747933216820460098
7022881423715022915
8751669652359695719
7805959133713491526
7379255153986712929
5931048648381654101
5792565167437854534
5072251864610916684
6301457644427949424
7662387979502119249
5924613370567016769
7155450464397845608
5508819797645154421
7812961871500165425
8733176167373680996
6072389850526861875
5572481444288745813
3627726900732913224
5936369189726532409
5726729576486549616
6518481388212874565
5200940015069590641
3831798496190232663
5217810952055641931
7310014483807416947
5581740512824154708
5292088351803930705
8311454016129562740
6077722263064114501
7227004362421654646
5506014849815442793
7867026782414074933
7951447529519871092
5436254289515999846
3474869555882187064
3275023352790345844
6372689608866424375
4780345975840848241
3622978028323494470
3704336284384768067
5428858691529229618
4055871316763897412
8670103568482783593
8378791360176810805
5578063578353715026
7597378457445152080
7019529915878700654
5074230976812496248
7658434046414836559
4859742878861832792
3631145364375234930
5561226971112239722
4768867198427022689
3338649982818800497
8377378466274953528
5996317861272174915
8391668757747494960
7795863275527097655
6428432498664100910
8815605154471625031
6072073126400316996
5283121874022459211
4703559467180386355
7221013136512599864
5795117270723605578
6300381163036369713
7874099137154741625
6302639533108448086
8681054939663910746
4843184014335554894
7453532344506743147
3275655374392615216
4717373568433024344
5359953675360291175
6077157341401337697
6145556804249410152
4131900188558437937
4925382476576420966
7735015142121370721
3267422378294526582
4770523076260296567
8463168822112512879
6283143131256472170
6145518231719262009
6076818494487868264
8017089528945993319
6227149273198393409
7726293945324892461
3347080995030651745
5639160223046582840
8021558915718800738
5922312100766906709
8661625409913768292
8388579204094649697
7794941932046074473
7445125569116792403
7383160620110272594
4712867993911121513
6510034012157007731
8518894391617090126
6497929244120734307
6077141852957521763
6435733389469770093
3702584989438523504
3337581089292365927
8816135127831831349
7075278518385263482
8740478913592175946
5221759207596570701
5135033144897598842
8820669809485312560
8602230732561209705
3838827563464618052
6143244638119948340
7080636515708003689
5580373827890992180
7594293172554724430
6229961952889759821
5000172258445256812
5936684744367036013
7003468318070305395
4121730954928080713
7802003915565331784
7012220499329764984
4930965920907809347
5149082549335516268
7167044858302851922
4706598436488696433
4759471673982586122
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<Inside MemCore<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< 
The No. 1Packet
3
128
Value Pkt
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<Inside MemCore<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< 
===================================================================
Entering engine CheckCache_lvl_1
input packet (0 bytes)
initial input and inout tuples:
	CheckCache_fl = (
		forward_1 = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x047a(1146)
		identification = 0x59b2(22962)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xdebe(57022)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0x2bcb(11211)
		dport = 0xb77c(46972)
		len = 0x0466(1126)
		chksum = 0x027a(634)
	)
	)
	ioports = (
		ingress_port = 0x0(0)
		egress_port = 0x0(0)
	)
	local_state = (
		id = 0x0004(4)
	)
	memcached_output = (
		forward = 0x0(0)
	)
clear internal and output-only tuples
	control = (
		offset = 0x0000(0)
		virtual_offset = 0x0000(0)
		section = 0x0(0)
		activeBank = 0x0(0)
		done = 0x0(0)
		error = 0x0(0)
	)
processing section local_start in stage 1
-------------------------------------------------------------------
Section local_start starting


	method move_to_section = memcached_sec

updated tuples:
	control = (
		offset = 0x0000(0)
		virtual_offset = 0x0000(0)
		section = 0x2(2)
		activeBank = 0x0(0)
		done = 0x0(0)
		error = 0x0(0)
	)
	CheckCache_fl = (
		forward_1 = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x047a(1146)
		identification = 0x59b2(22962)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xdebe(57022)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0x2bcb(11211)
		dport = 0xb77c(46972)
		len = 0x0466(1126)
		chksum = 0x027a(634)
	)
	)
	ioports = (
		ingress_port = 0x0(0)
		egress_port = 0x0(0)
	)
	local_state = (
		id = 0x0004(4)
	)
	memcached_output = (
		forward = 0x0(0)
	)
Section local_start finished
-------------------------------------------------------------------
processing section memcached_sec in stage 2
-------------------------------------------------------------------
Section memcached_sec starting

	method update (tuples)
		CheckCache_fl.forward_1 = 0x0(0)


	method move_to_section = sink

updated tuples:
	control = (
		offset = 0x0000(0)
		virtual_offset = 0x0000(0)
		section = 0x3(3)
		activeBank = 0x0(0)
		done = 0x0(0)
		error = 0x0(0)
	)
	CheckCache_fl = (
		forward_1 = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x047a(1146)
		identification = 0x59b2(22962)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xdebe(57022)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0x2bcb(11211)
		dport = 0xb77c(46972)
		len = 0x0466(1126)
		chksum = 0x027a(634)
	)
	)
	ioports = (
		ingress_port = 0x0(0)
		egress_port = 0x0(0)
	)
	local_state = (
		id = 0x0004(4)
	)
	memcached_output = (
		forward = 0x0(0)
	)
Section memcached_sec finished
-------------------------------------------------------------------
processing section sink in stage 3
-------------------------------------------------------------------
Section sink starting


	method move_to_section = done(0)

updated tuples:
	control = (
		offset = 0x0000(0)
		virtual_offset = 0x0000(0)
		section = 0x0(0)
		activeBank = 0x0(0)
		done = 0x1(1)
		error = 0x0(0)
	)
	CheckCache_fl = (
		forward_1 = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x047a(1146)
		identification = 0x59b2(22962)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xdebe(57022)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0x2bcb(11211)
		dport = 0xb77c(46972)
		len = 0x0466(1126)
		chksum = 0x027a(634)
	)
	)
	ioports = (
		ingress_port = 0x0(0)
		egress_port = 0x0(0)
	)
	local_state = (
		id = 0x0004(4)
	)
	memcached_output = (
		forward = 0x0(0)
	)
Section sink finished
-------------------------------------------------------------------
final inout and output tuples:

Note: this engine's wrapper will clear the upper control tuple fields on output, except for the 'control.error' field.

	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x047a(1146)
		identification = 0x59b2(22962)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xdebe(57022)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0x2bcb(11211)
		dport = 0xb77c(46972)
		len = 0x0466(1126)
		chksum = 0x027a(634)
	)
	)
	ioports = (
		ingress_port = 0x0(0)
		egress_port = 0x0(0)
	)
Exiting engine CheckCache_lvl_1
===================================================================
===================================================================
Entering engine Deparser
input packet (1160 bytes)
 0x0000(0) : 00 00 00 00 00 00 00 00 00 00 00 00 08 00 45 00 
0x0010(16) : 04 7a 59 b2 40 00 40 11 de be 7f 00 00 01 7f 00 
0x0020(32) : 00 01 2b cb b7 7c 04 66 02 7a 00 01 00 00 00 01 
0x0030(48) : 00 00 56 41 4c 55 45 20 10 10 10 10 10 10 10 10 
0x0040(64) : 61 31 4c 48 4c 7a 42 61 76 49 72 30 39 38 43 79 
0x0050(80) : 74 2d 2e 34 77 4d 67 6c 54 56 79 70 35 66 46 66 
0x0060(96) : 68 61 77 30 59 35 61 52 4f 51 52 58 59 64 55 50 
0x0070(112) : 63 53 54 57 6f 37 46 46 20 30 20 31 30 32 34 0d 
0x0080(128) : 0a 61 31 4c 48 4c 7a 42 61 76 49 72 30 39 38 43 
0x0090(144) : 79 74 2d 2e 34 77 4d 67 6c 54 56 79 70 35 66 46 
0x00a0(160) : 66 68 61 77 30 59 35 61 52 4f 51 52 58 59 64 55 
0x00b0(176) : 50 63 53 54 57 6f 37 46 46 64 42 32 69 72 49 4c 
0x00c0(192) : 57 73 46 57 4f 4c 35 70 6a 56 45 45 31 72 69 51 
0x00d0(208) : 52 38 74 78 78 2d 41 41 63 4d 44 49 42 56 64 68 
0x00e0(224) : 4c 73 42 6b 42 47 58 75 6c 6d 37 6d 62 70 41 31 
0x00f0(240) : 79 32 79 74 31 37 31 64 54 45 76 65 6a 57 4a 33 
0x0100(256) : 4d 55 6e 59 6c 49 51 55 32 58 46 65 4c 50 66 48 
0x0110(272) : 52 62 38 53 69 39 33 39 4f 79 6e 35 53 34 38 70 
0x0120(288) : 5a 76 4c 49 43 6c 6d 45 48 2d 73 63 50 56 74 71 
0x0130(304) : 35 2d 48 6e 38 4b 78 57 48 69 63 6a 6e 6b 57 4b 
0x0140(320) : 65 72 63 71 62 4d 32 73 4d 76 53 6c 4f 4a 5a 54 
0x0150(336) : 49 71 46 51 39 41 78 51 73 58 37 64 46 65 78 74 
0x0160(352) : 54 58 68 32 75 6b 75 45 64 4b 7a 2d 64 57 54 76 
0x0170(368) : 4c 69 4b 55 73 46 75 69 6d 2d 4b 2d 64 46 74 35 
0x0180(384) : 6e 59 37 66 47 30 74 74 4b 71 74 79 4b 4b 72 66 
0x0190(400) : 30 39 37 73 4f 2d 59 38 2d 73 38 63 36 2d 68 74 
0x01a0(416) : 58 70 57 6f 70 4e 66 37 42 57 33 56 71 76 39 71 
0x01b0(432) : 32 47 67 52 47 44 5a 46 33 68 72 39 67 58 30 43 
0x01c0(448) : 4b 57 2e 37 74 64 45 32 38 49 59 79 42 68 6e 44 
0x01d0(464) : 78 52 65 42 65 43 51 69 74 47 72 59 6e 73 6b 35 
0x01e0(480) : 4d 69 43 45 4a 51 47 52 69 6f 4f 74 54 39 35 50 
0x01f0(496) : 61 6a 61 44 76 2d 76 6e 46 6b 4a 30 61 31 35 78 
0x0200(512) : 6a 48 39 30 68 50 53 4f 43 71 46 66 7a 4b 32 58 
0x0210(528) : 32 64 6b 78 63 64 69 72 4d 2d 72 77 30 77 72 6a 
0x0220(544) : 42 2e 6b 73 4f 41 45 61 2e 55 44 78 6f 47 53 71 
0x0230(560) : 74 42 6d 54 6f 53 49 38 53 37 33 53 31 75 41 43 
0x0240(576) : 74 75 32 46 32 48 70 30 6c 30 78 58 47 4e 4d 37 
0x0250(592) : 59 36 61 4c 59 73 54 2e 7a 57 52 2e 50 62 41 47 
0x0260(608) : 54 44 56 56 55 49 56 44 49 51 6b 5a 6e 34 67 4b 
0x0270(624) : 41 46 66 6a 35 36 68 33 64 36 31 30 68 43 47 38 
0x0280(640) : 50 6c 64 74 31 36 34 4a 57 6f 73 49 74 58 63 31 
0x0290(656) : 6d 46 6b 72 4c 51 75 79 57 77 79 43 36 43 4b 56 
0x02a0(672) : 78 79 4d 79 32 51 47 5a 43 36 72 33 64 52 35 4e 
0x02b0(688) : 67 70 44 2d 44 35 79 6b 2d 75 77 35 35 45 61 30 
0x02c0(704) : 41 77 7a 44 4b 44 6d 58 4a 62 61 78 30 66 49 67 
0x02d0(720) : 54 56 66 67 62 62 4f 61 55 49 67 5a 58 45 5a 68 
0x02e0(736) : 39 57 75 54 6a 65 2e 31 44 5a 79 44 43 45 74 66 
0x02f0(752) : 6b 58 4b 4a 36 69 74 61 2d 58 37 57 6d 68 42 76 
0x0300(768) : 42 34 4d 76 69 4c 77 77 75 73 37 34 34 2d 6b 6f 
0x0310(784) : 57 32 35 63 6b 7a 42 6a 55 49 44 45 7a 50 37 39 
0x0320(800) : 54 55 32 39 70 79 33 68 6f 42 6c 73 41 54 66 67 
0x0330(816) : 56 6b 47 45 68 52 78 41 6b 39 4f 68 59 57 71 2d 
0x0340(832) : 2e 73 38 6e 6f 43 53 61 4e 42 52 58 66 34 42 38 
0x0350(848) : 6f 52 4d 55 74 49 65 62 52 30 47 7a 57 35 79 55 
0x0360(864) : 78 34 46 6b 47 68 49 64 74 6a 38 57 6e 4a 65 61 
0x0370(880) : 6c 2d 32 63 48 67 42 69 67 52 66 42 57 62 66 53 
0x0380(896) : 66 76 41 77 61 53 58 52 41 67 78 78 7a 61 56 69 
0x0390(912) : 5a 58 49 71 42 54 57 73 76 39 31 50 6b 67 72 4e 
0x03a0(928) : 5a 2d 48 38 53 70 5a 63 54 56 58 51 33 31 37 63 
0x03b0(944) : 59 50 51 6b 74 77 61 6d 33 62 39 6e 46 2d 38 70 
0x03c0(960) : 2e 51 78 51 44 55 30 67 7a 59 34 30 5a 42 63 35 
0x03d0(976) : 62 30 70 53 77 4e 43 7a 79 4c 6b 43 4b 74 2d 4a 
0x03e0(992) : 48 77 6a 55 4f 6b 38 4d 47 43 4d 70 4f 7a 75 7a 
0x03f0(1008) : 7a 69 50 75 33 62 72 30 77 61 43 46 52 42 59 69 
0x0400(1024) : 35 46 41 54 7a 49 70 44 55 41 30 73 37 76 70 34 
0x0410(1040) : 62 43 79 65 6e 6f 65 69 4d 71 78 6e 2d 54 54 34 
0x0420(1056) : 69 64 59 67 76 4c 74 4e 56 75 45 63 6e 31 68 4d 
0x0430(1072) : 45 64 2e 2d 50 64 68 6c 52 63 57 52 33 7a 56 6d 
0x0440(1088) : 61 31 51 54 4e 48 72 73 39 33 54 77 34 38 47 49 
0x0450(1104) : 6c 46 49 39 73 7a 75 48 61 50 69 64 4d 43 4e 78 
0x0460(1120) : 44 6e 4f 61 33 44 52 43 47 75 37 4c 30 4e 64 6c 
0x0470(1136) : 63 76 75 53 74 6e 6b 52 41 51 32 57 63 51 52 71 
0x0480(1152) : 42 0d 0a 45 4e 44 0d 0a 
initial input and inout tuples:
	control = (
		offset = 0x0000(0)
		virtual_offset = 0x0000(0)
		section = 0x0(0)
		activeBank = 0x0(0)
		done = 0x0(0)
		error = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x047a(1146)
		identification = 0x59b2(22962)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xdebe(57022)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0x2bcb(11211)
		dport = 0xb77c(46972)
		len = 0x0466(1126)
		chksum = 0x027a(634)
	)
	)
	Deparser_extracts = (
		size = 0x00000150(336)
	)
clear internal and output-only tuples
processing section extract_headers_sec in stage 1
-------------------------------------------------------------------
Section extract_headers_sec starting


	method remove
	removing 42 bytes at byte 0:
 0x0000(0) : 00 00 00 00 00 00 00 00 00 00 00 00 08 00 45 00 
0x0010(16) : 04 7a 59 b2 40 00 40 11 de be 7f 00 00 01 7f 00 
0x0020(32) : 00 01 2b cb b7 7c 04 66 02 7a 
	method move_to_section = act_sec

updated tuples:
	control = (
		offset = 0x0000(0)
		virtual_offset = 0x0150(336)
		section = 0x1(1)
		activeBank = 0x0(0)
		done = 0x0(0)
		error = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x047a(1146)
		identification = 0x59b2(22962)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xdebe(57022)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0x2bcb(11211)
		dport = 0xb77c(46972)
		len = 0x0466(1126)
		chksum = 0x027a(634)
	)
	)
	Deparser_extracts = (
		size = 0x00000150(336)
	)
Section extract_headers_sec finished
-------------------------------------------------------------------
processing section act_sec in stage 2
-------------------------------------------------------------------
Section act_sec starting


	method move_to_section = emit_3

updated tuples:
	control = (
		offset = 0x0000(0)
		virtual_offset = 0x0150(336)
		section = 0x5(5)
		activeBank = 0x0(0)
		done = 0x0(0)
		error = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x047a(1146)
		identification = 0x59b2(22962)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xdebe(57022)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0x2bcb(11211)
		dport = 0xb77c(46972)
		len = 0x0466(1126)
		chksum = 0x027a(634)
	)
	)
	Deparser_extracts = (
		size = 0x00000150(336)
	)
Section act_sec finished
-------------------------------------------------------------------
processing section emit_3 in stage 3
-------------------------------------------------------------------
Section emit_3 starting

	method update (tuples)


	method update (packet)
		 dst = 0x000000000000(0)
		 src = 0x000000000000(0)
		 type = 0x0800(2048)

	method insert
	inserting 14 bytes at byte 0:
 0x0000(0) : 00 00 00 00 00 00 00 00 00 00 00 00 08 00 
	method move_to_section = emit_2

updated tuples:
	control = (
		offset = 0x0070(112)
		virtual_offset = 0x0150(336)
		section = 0x4(4)
		activeBank = 0x0(0)
		done = 0x0(0)
		error = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x047a(1146)
		identification = 0x59b2(22962)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xdebe(57022)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0x2bcb(11211)
		dport = 0xb77c(46972)
		len = 0x0466(1126)
		chksum = 0x027a(634)
	)
	)
	Deparser_extracts = (
		size = 0x00000150(336)
	)
Section emit_3 finished
-------------------------------------------------------------------
processing section emit_2 in stage 4
-------------------------------------------------------------------
Section emit_2 starting

	method update (tuples)


	method update (packet)
		 traffic_class = 0x0(0)
		 block_index = 0x00(0)
		 packet_index = 0x00(0)
		 original_type = 0x0000(0)

	method insert
	inserting 0 bytes at byte 14:
 0x0000(0) :                                           
	method move_to_section = emit_1

updated tuples:
	control = (
		offset = 0x0070(112)
		virtual_offset = 0x0150(336)
		section = 0x3(3)
		activeBank = 0x0(0)
		done = 0x0(0)
		error = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x047a(1146)
		identification = 0x59b2(22962)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xdebe(57022)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0x2bcb(11211)
		dport = 0xb77c(46972)
		len = 0x0466(1126)
		chksum = 0x027a(634)
	)
	)
	Deparser_extracts = (
		size = 0x00000150(336)
	)
Section emit_2 finished
-------------------------------------------------------------------
processing section emit_1 in stage 5
-------------------------------------------------------------------
Section emit_1 starting

	method update (tuples)


	method update (packet)
		 version = 0x4(4)
		 ihl = 0x5(5)
		 diffserv = 0x00(0)
		 totallen = 0x047a(1146)
		 identification = 0x59b2(22962)
		 flags = 0x2(2)
		 fragoffset = 0x0000(0)
		 ttl = 0x40(64)
		 protocol = 0x11(17)
		 hdrchecksum = 0xdebe(57022)
		 srcAddr = 0x7f000001(2130706433)
		 dstAddr = 0x7f000001(2130706433)

	method insert
	inserting 20 bytes at byte 14:
 0x0000(0) :                                           45 00 
0x0010(16) : 04 7a 59 b2 40 00 40 11 de be 7f 00 00 01 7f 00 
0x0020(32) : 00 01 
	method move_to_section = emit_0

updated tuples:
	control = (
		offset = 0x0110(272)
		virtual_offset = 0x0150(336)
		section = 0x2(2)
		activeBank = 0x0(0)
		done = 0x0(0)
		error = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x047a(1146)
		identification = 0x59b2(22962)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xdebe(57022)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0x2bcb(11211)
		dport = 0xb77c(46972)
		len = 0x0466(1126)
		chksum = 0x027a(634)
	)
	)
	Deparser_extracts = (
		size = 0x00000150(336)
	)
Section emit_1 finished
-------------------------------------------------------------------
processing section emit_0 in stage 6
-------------------------------------------------------------------
Section emit_0 starting

	method update (tuples)


	method update (packet)
		 sport = 0x2bcb(11211)
		 dport = 0xb77c(46972)
		 len = 0x0466(1126)
		 chksum = 0x027a(634)

	method insert
	inserting 8 bytes at byte 34:
0x0020(32) :       2b cb b7 7c 04 66 02 7a 
	method move_to_section = done(0)

updated tuples:
	control = (
		offset = 0x0150(336)
		virtual_offset = 0x0150(336)
		section = 0x0(0)
		activeBank = 0x0(0)
		done = 0x1(1)
		error = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x047a(1146)
		identification = 0x59b2(22962)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xdebe(57022)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0x2bcb(11211)
		dport = 0xb77c(46972)
		len = 0x0466(1126)
		chksum = 0x027a(634)
	)
	)
	Deparser_extracts = (
		size = 0x00000150(336)
	)
Section emit_0 finished
-------------------------------------------------------------------
final inout and output tuples:

Note: this engine's wrapper will clear the upper control tuple fields on output, except for the 'control.error' field.

	control = (
		offset = 0x0000(0)
		virtual_offset = 0x0000(0)
		section = 0x0(0)
		activeBank = 0x0(0)
		done = 0x0(0)
		error = 0x0(0)
	)
output packet (1160 bytes)
 0x0000(0) : 00 00 00 00 00 00 00 00 00 00 00 00 08 00 45 00 
0x0010(16) : 04 7a 59 b2 40 00 40 11 de be 7f 00 00 01 7f 00 
0x0020(32) : 00 01 2b cb b7 7c 04 66 02 7a 00 01 00 00 00 01 
0x0030(48) : 00 00 56 41 4c 55 45 20 10 10 10 10 10 10 10 10 
0x0040(64) : 61 31 4c 48 4c 7a 42 61 76 49 72 30 39 38 43 79 
0x0050(80) : 74 2d 2e 34 77 4d 67 6c 54 56 79 70 35 66 46 66 
0x0060(96) : 68 61 77 30 59 35 61 52 4f 51 52 58 59 64 55 50 
0x0070(112) : 63 53 54 57 6f 37 46 46 20 30 20 31 30 32 34 0d 
0x0080(128) : 0a 61 31 4c 48 4c 7a 42 61 76 49 72 30 39 38 43 
0x0090(144) : 79 74 2d 2e 34 77 4d 67 6c 54 56 79 70 35 66 46 
0x00a0(160) : 66 68 61 77 30 59 35 61 52 4f 51 52 58 59 64 55 
0x00b0(176) : 50 63 53 54 57 6f 37 46 46 64 42 32 69 72 49 4c 
0x00c0(192) : 57 73 46 57 4f 4c 35 70 6a 56 45 45 31 72 69 51 
0x00d0(208) : 52 38 74 78 78 2d 41 41 63 4d 44 49 42 56 64 68 
0x00e0(224) : 4c 73 42 6b 42 47 58 75 6c 6d 37 6d 62 70 41 31 
0x00f0(240) : 79 32 79 74 31 37 31 64 54 45 76 65 6a 57 4a 33 
0x0100(256) : 4d 55 6e 59 6c 49 51 55 32 58 46 65 4c 50 66 48 
0x0110(272) : 52 62 38 53 69 39 33 39 4f 79 6e 35 53 34 38 70 
0x0120(288) : 5a 76 4c 49 43 6c 6d 45 48 2d 73 63 50 56 74 71 
0x0130(304) : 35 2d 48 6e 38 4b 78 57 48 69 63 6a 6e 6b 57 4b 
0x0140(320) : 65 72 63 71 62 4d 32 73 4d 76 53 6c 4f 4a 5a 54 
0x0150(336) : 49 71 46 51 39 41 78 51 73 58 37 64 46 65 78 74 
0x0160(352) : 54 58 68 32 75 6b 75 45 64 4b 7a 2d 64 57 54 76 
0x0170(368) : 4c 69 4b 55 73 46 75 69 6d 2d 4b 2d 64 46 74 35 
0x0180(384) : 6e 59 37 66 47 30 74 74 4b 71 74 79 4b 4b 72 66 
0x0190(400) : 30 39 37 73 4f 2d 59 38 2d 73 38 63 36 2d 68 74 
0x01a0(416) : 58 70 57 6f 70 4e 66 37 42 57 33 56 71 76 39 71 
0x01b0(432) : 32 47 67 52 47 44 5a 46 33 68 72 39 67 58 30 43 
0x01c0(448) : 4b 57 2e 37 74 64 45 32 38 49 59 79 42 68 6e 44 
0x01d0(464) : 78 52 65 42 65 43 51 69 74 47 72 59 6e 73 6b 35 
0x01e0(480) : 4d 69 43 45 4a 51 47 52 69 6f 4f 74 54 39 35 50 
0x01f0(496) : 61 6a 61 44 76 2d 76 6e 46 6b 4a 30 61 31 35 78 
0x0200(512) : 6a 48 39 30 68 50 53 4f 43 71 46 66 7a 4b 32 58 
0x0210(528) : 32 64 6b 78 63 64 69 72 4d 2d 72 77 30 77 72 6a 
0x0220(544) : 42 2e 6b 73 4f 41 45 61 2e 55 44 78 6f 47 53 71 
0x0230(560) : 74 42 6d 54 6f 53 49 38 53 37 33 53 31 75 41 43 
0x0240(576) : 74 75 32 46 32 48 70 30 6c 30 78 58 47 4e 4d 37 
0x0250(592) : 59 36 61 4c 59 73 54 2e 7a 57 52 2e 50 62 41 47 
0x0260(608) : 54 44 56 56 55 49 56 44 49 51 6b 5a 6e 34 67 4b 
0x0270(624) : 41 46 66 6a 35 36 68 33 64 36 31 30 68 43 47 38 
0x0280(640) : 50 6c 64 74 31 36 34 4a 57 6f 73 49 74 58 63 31 
0x0290(656) : 6d 46 6b 72 4c 51 75 79 57 77 79 43 36 43 4b 56 
0x02a0(672) : 78 79 4d 79 32 51 47 5a 43 36 72 33 64 52 35 4e 
0x02b0(688) : 67 70 44 2d 44 35 79 6b 2d 75 77 35 35 45 61 30 
0x02c0(704) : 41 77 7a 44 4b 44 6d 58 4a 62 61 78 30 66 49 67 
0x02d0(720) : 54 56 66 67 62 62 4f 61 55 49 67 5a 58 45 5a 68 
0x02e0(736) : 39 57 75 54 6a 65 2e 31 44 5a 79 44 43 45 74 66 
0x02f0(752) : 6b 58 4b 4a 36 69 74 61 2d 58 37 57 6d 68 42 76 
0x0300(768) : 42 34 4d 76 69 4c 77 77 75 73 37 34 34 2d 6b 6f 
0x0310(784) : 57 32 35 63 6b 7a 42 6a 55 49 44 45 7a 50 37 39 
0x0320(800) : 54 55 32 39 70 79 33 68 6f 42 6c 73 41 54 66 67 
0x0330(816) : 56 6b 47 45 68 52 78 41 6b 39 4f 68 59 57 71 2d 
0x0340(832) : 2e 73 38 6e 6f 43 53 61 4e 42 52 58 66 34 42 38 
0x0350(848) : 6f 52 4d 55 74 49 65 62 52 30 47 7a 57 35 79 55 
0x0360(864) : 78 34 46 6b 47 68 49 64 74 6a 38 57 6e 4a 65 61 
0x0370(880) : 6c 2d 32 63 48 67 42 69 67 52 66 42 57 62 66 53 
0x0380(896) : 66 76 41 77 61 53 58 52 41 67 78 78 7a 61 56 69 
0x0390(912) : 5a 58 49 71 42 54 57 73 76 39 31 50 6b 67 72 4e 
0x03a0(928) : 5a 2d 48 38 53 70 5a 63 54 56 58 51 33 31 37 63 
0x03b0(944) : 59 50 51 6b 74 77 61 6d 33 62 39 6e 46 2d 38 70 
0x03c0(960) : 2e 51 78 51 44 55 30 67 7a 59 34 30 5a 42 63 35 
0x03d0(976) : 62 30 70 53 77 4e 43 7a 79 4c 6b 43 4b 74 2d 4a 
0x03e0(992) : 48 77 6a 55 4f 6b 38 4d 47 43 4d 70 4f 7a 75 7a 
0x03f0(1008) : 7a 69 50 75 33 62 72 30 77 61 43 46 52 42 59 69 
0x0400(1024) : 35 46 41 54 7a 49 70 44 55 41 30 73 37 76 70 34 
0x0410(1040) : 62 43 79 65 6e 6f 65 69 4d 71 78 6e 2d 54 54 34 
0x0420(1056) : 69 64 59 67 76 4c 74 4e 56 75 45 63 6e 31 68 4d 
0x0430(1072) : 45 64 2e 2d 50 64 68 6c 52 63 57 52 33 7a 56 6d 
0x0440(1088) : 61 31 51 54 4e 48 72 73 39 33 54 77 34 38 47 49 
0x0450(1104) : 6c 46 49 39 73 7a 75 48 61 50 69 64 4d 43 4e 78 
0x0460(1120) : 44 6e 4f 61 33 44 52 43 47 75 37 4c 30 4e 64 6c 
0x0470(1136) : 63 76 75 53 74 6e 6b 52 41 51 32 57 63 51 52 71 
0x0480(1152) : 42 0d 0a 45 4e 44 0d 0a 
Exiting engine Deparser
===================================================================
final inout and output tuples:
	ioports = (
		ingress_port = 0x0(0)
		egress_port = 0x0(0)
	)
output packet (1160 bytes)
 0x0000(0) : 00 00 00 00 00 00 00 00 00 00 00 00 08 00 45 00 
0x0010(16) : 04 7a 59 b2 40 00 40 11 de be 7f 00 00 01 7f 00 
0x0020(32) : 00 01 2b cb b7 7c 04 66 02 7a 00 01 00 00 00 01 
0x0030(48) : 00 00 56 41 4c 55 45 20 10 10 10 10 10 10 10 10 
0x0040(64) : 61 31 4c 48 4c 7a 42 61 76 49 72 30 39 38 43 79 
0x0050(80) : 74 2d 2e 34 77 4d 67 6c 54 56 79 70 35 66 46 66 
0x0060(96) : 68 61 77 30 59 35 61 52 4f 51 52 58 59 64 55 50 
0x0070(112) : 63 53 54 57 6f 37 46 46 20 30 20 31 30 32 34 0d 
0x0080(128) : 0a 61 31 4c 48 4c 7a 42 61 76 49 72 30 39 38 43 
0x0090(144) : 79 74 2d 2e 34 77 4d 67 6c 54 56 79 70 35 66 46 
0x00a0(160) : 66 68 61 77 30 59 35 61 52 4f 51 52 58 59 64 55 
0x00b0(176) : 50 63 53 54 57 6f 37 46 46 64 42 32 69 72 49 4c 
0x00c0(192) : 57 73 46 57 4f 4c 35 70 6a 56 45 45 31 72 69 51 
0x00d0(208) : 52 38 74 78 78 2d 41 41 63 4d 44 49 42 56 64 68 
0x00e0(224) : 4c 73 42 6b 42 47 58 75 6c 6d 37 6d 62 70 41 31 
0x00f0(240) : 79 32 79 74 31 37 31 64 54 45 76 65 6a 57 4a 33 
0x0100(256) : 4d 55 6e 59 6c 49 51 55 32 58 46 65 4c 50 66 48 
0x0110(272) : 52 62 38 53 69 39 33 39 4f 79 6e 35 53 34 38 70 
0x0120(288) : 5a 76 4c 49 43 6c 6d 45 48 2d 73 63 50 56 74 71 
0x0130(304) : 35 2d 48 6e 38 4b 78 57 48 69 63 6a 6e 6b 57 4b 
0x0140(320) : 65 72 63 71 62 4d 32 73 4d 76 53 6c 4f 4a 5a 54 
0x0150(336) : 49 71 46 51 39 41 78 51 73 58 37 64 46 65 78 74 
0x0160(352) : 54 58 68 32 75 6b 75 45 64 4b 7a 2d 64 57 54 76 
0x0170(368) : 4c 69 4b 55 73 46 75 69 6d 2d 4b 2d 64 46 74 35 
0x0180(384) : 6e 59 37 66 47 30 74 74 4b 71 74 79 4b 4b 72 66 
0x0190(400) : 30 39 37 73 4f 2d 59 38 2d 73 38 63 36 2d 68 74 
0x01a0(416) : 58 70 57 6f 70 4e 66 37 42 57 33 56 71 76 39 71 
0x01b0(432) : 32 47 67 52 47 44 5a 46 33 68 72 39 67 58 30 43 
0x01c0(448) : 4b 57 2e 37 74 64 45 32 38 49 59 79 42 68 6e 44 
0x01d0(464) : 78 52 65 42 65 43 51 69 74 47 72 59 6e 73 6b 35 
0x01e0(480) : 4d 69 43 45 4a 51 47 52 69 6f 4f 74 54 39 35 50 
0x01f0(496) : 61 6a 61 44 76 2d 76 6e 46 6b 4a 30 61 31 35 78 
0x0200(512) : 6a 48 39 30 68 50 53 4f 43 71 46 66 7a 4b 32 58 
0x0210(528) : 32 64 6b 78 63 64 69 72 4d 2d 72 77 30 77 72 6a 
0x0220(544) : 42 2e 6b 73 4f 41 45 61 2e 55 44 78 6f 47 53 71 
0x0230(560) : 74 42 6d 54 6f 53 49 38 53 37 33 53 31 75 41 43 
0x0240(576) : 74 75 32 46 32 48 70 30 6c 30 78 58 47 4e 4d 37 
0x0250(592) : 59 36 61 4c 59 73 54 2e 7a 57 52 2e 50 62 41 47 
0x0260(608) : 54 44 56 56 55 49 56 44 49 51 6b 5a 6e 34 67 4b 
0x0270(624) : 41 46 66 6a 35 36 68 33 64 36 31 30 68 43 47 38 
0x0280(640) : 50 6c 64 74 31 36 34 4a 57 6f 73 49 74 58 63 31 
0x0290(656) : 6d 46 6b 72 4c 51 75 79 57 77 79 43 36 43 4b 56 
0x02a0(672) : 78 79 4d 79 32 51 47 5a 43 36 72 33 64 52 35 4e 
0x02b0(688) : 67 70 44 2d 44 35 79 6b 2d 75 77 35 35 45 61 30 
0x02c0(704) : 41 77 7a 44 4b 44 6d 58 4a 62 61 78 30 66 49 67 
0x02d0(720) : 54 56 66 67 62 62 4f 61 55 49 67 5a 58 45 5a 68 
0x02e0(736) : 39 57 75 54 6a 65 2e 31 44 5a 79 44 43 45 74 66 
0x02f0(752) : 6b 58 4b 4a 36 69 74 61 2d 58 37 57 6d 68 42 76 
0x0300(768) : 42 34 4d 76 69 4c 77 77 75 73 37 34 34 2d 6b 6f 
0x0310(784) : 57 32 35 63 6b 7a 42 6a 55 49 44 45 7a 50 37 39 
0x0320(800) : 54 55 32 39 70 79 33 68 6f 42 6c 73 41 54 66 67 
0x0330(816) : 56 6b 47 45 68 52 78 41 6b 39 4f 68 59 57 71 2d 
0x0340(832) : 2e 73 38 6e 6f 43 53 61 4e 42 52 58 66 34 42 38 
0x0350(848) : 6f 52 4d 55 74 49 65 62 52 30 47 7a 57 35 79 55 
0x0360(864) : 78 34 46 6b 47 68 49 64 74 6a 38 57 6e 4a 65 61 
0x0370(880) : 6c 2d 32 63 48 67 42 69 67 52 66 42 57 62 66 53 
0x0380(896) : 66 76 41 77 61 53 58 52 41 67 78 78 7a 61 56 69 
0x0390(912) : 5a 58 49 71 42 54 57 73 76 39 31 50 6b 67 72 4e 
0x03a0(928) : 5a 2d 48 38 53 70 5a 63 54 56 58 51 33 31 37 63 
0x03b0(944) : 59 50 51 6b 74 77 61 6d 33 62 39 6e 46 2d 38 70 
0x03c0(960) : 2e 51 78 51 44 55 30 67 7a 59 34 30 5a 42 63 35 
0x03d0(976) : 62 30 70 53 77 4e 43 7a 79 4c 6b 43 4b 74 2d 4a 
0x03e0(992) : 48 77 6a 55 4f 6b 38 4d 47 43 4d 70 4f 7a 75 7a 
0x03f0(1008) : 7a 69 50 75 33 62 72 30 77 61 43 46 52 42 59 69 
0x0400(1024) : 35 46 41 54 7a 49 70 44 55 41 30 73 37 76 70 34 
0x0410(1040) : 62 43 79 65 6e 6f 65 69 4d 71 78 6e 2d 54 54 34 
0x0420(1056) : 69 64 59 67 76 4c 74 4e 56 75 45 63 6e 31 68 4d 
0x0430(1072) : 45 64 2e 2d 50 64 68 6c 52 63 57 52 33 7a 56 6d 
0x0440(1088) : 61 31 51 54 4e 48 72 73 39 33 54 77 34 38 47 49 
0x0450(1104) : 6c 46 49 39 73 7a 75 48 61 50 69 64 4d 43 4e 78 
0x0460(1120) : 44 6e 4f 61 33 44 52 43 47 75 37 4c 30 4e 64 6c 
0x0470(1136) : 63 76 75 53 74 6e 6b 52 41 51 32 57 63 51 52 71 
0x0480(1152) : 42 0d 0a 45 4e 44 0d 0a 
Exiting system XilinxSwitch
===================================================================
Evaluating packet #3(120 bytes)
 0x0000(0) : 00 00 00 00 00 00 00 00 00 00 00 00 08 00 45 00 
0x0010(16) : 00 6a 59 b1 40 00 40 11 e2 cf 7f 00 00 01 7f 00 
0x0020(32) : 00 01 b7 7c 2b cb 00 56 fe 69 00 01 00 00 00 01 
0x0030(48) : 01 00 67 65 74 20 10 10 10 10 10 10 10 10 61 31 
0x0040(64) : 4c 48 4c 7a 42 61 76 49 72 30 39 38 43 79 74 2d 
0x0050(80) : 2e 34 77 4d 67 6c 54 56 79 70 35 66 46 66 68 61 
0x0060(96) : 77 30 59 35 61 52 4f 51 52 58 59 64 55 50 63 53 
0x0070(112) : 54 57 6f 37 46 46 0d 0a 
===================================================================
Entering system XilinxSwitch
input packet (120 bytes)
 0x0000(0) : 00 00 00 00 00 00 00 00 00 00 00 00 08 00 45 00 
0x0010(16) : 00 6a 59 b1 40 00 40 11 e2 cf 7f 00 00 01 7f 00 
0x0020(32) : 00 01 b7 7c 2b cb 00 56 fe 69 00 01 00 00 00 01 
0x0030(48) : 01 00 67 65 74 20 10 10 10 10 10 10 10 10 61 31 
0x0040(64) : 4c 48 4c 7a 42 61 76 49 72 30 39 38 43 79 74 2d 
0x0050(80) : 2e 34 77 4d 67 6c 54 56 79 70 35 66 46 66 68 61 
0x0060(96) : 77 30 59 35 61 52 4f 51 52 58 59 64 55 50 63 53 
0x0070(112) : 54 57 6f 37 46 46 0d 0a 
initial input and inout tuples:
	ioports = (
		ingress_port = 0x0(0)
		egress_port = 0x0(0)
	)
clear internal and output-only tuples
===================================================================
Entering engine Parser
input packet (120 bytes)
 0x0000(0) : 00 00 00 00 00 00 00 00 00 00 00 00 08 00 45 00 
0x0010(16) : 00 6a 59 b1 40 00 40 11 e2 cf 7f 00 00 01 7f 00 
0x0020(32) : 00 01 b7 7c 2b cb 00 56 fe 69 00 01 00 00 00 01 
0x0030(48) : 01 00 67 65 74 20 10 10 10 10 10 10 10 10 61 31 
0x0040(64) : 4c 48 4c 7a 42 61 76 49 72 30 39 38 43 79 74 2d 
0x0050(80) : 2e 34 77 4d 67 6c 54 56 79 70 35 66 46 66 68 61 
0x0060(96) : 77 30 59 35 61 52 4f 51 52 58 59 64 55 50 63 53 
0x0070(112) : 54 57 6f 37 46 46 0d 0a 
initial input and inout tuples:
	control = (
		offset = 0x0000(0)
		virtual_offset = 0x0000(0)
		section = 0x0(0)
		activeBank = 0x0(0)
		done = 0x0(0)
		error = 0x0(0)
	)
clear internal and output-only tuples
	hdr = (
		eth = (
		isValid = 0x0(0)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0000(0)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x0(0)
		version = 0x0(0)
		ihl = 0x0(0)
		diffserv = 0x00(0)
		totallen = 0x0000(0)
		identification = 0x0000(0)
		flags = 0x0(0)
		fragoffset = 0x0000(0)
		ttl = 0x00(0)
		protocol = 0x00(0)
		hdrchecksum = 0x0000(0)
		srcAddr = 0x00000000(0)
		dstAddr = 0x00000000(0)
	)
		udp = (
		isValid = 0x0(0)
		sport = 0x0000(0)
		dport = 0x0000(0)
		len = 0x0000(0)
		chksum = 0x0000(0)
	)
	)
	Parser_extracts = (
		size = 0x00000000(0)
	)
processing section start in stage 1
-------------------------------------------------------------------
Section start starting

	extracting 112 bits at offset 0x0000(0)
		dst_0 = 0x000000000000(0)
		src_0 = 0x000000000000(0)
		type_0 = 0x0800(2048)

	method update (tuples)
		hdr.eth.isValid = 0x1(1)
		hdr.eth.dst = 0x000000000000(0)
		hdr.eth.src = 0x000000000000(0)
		hdr.eth.type = 0x0800(2048)
		Parser_extracts.size = 0x00000070(112)


	method move_to_section = parse_ipv4

updated tuples:
	control = (
		offset = 0x0070(112)
		virtual_offset = 0x0070(112)
		section = 0x2(2)
		activeBank = 0x0(0)
		done = 0x0(0)
		error = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x0(0)
		version = 0x0(0)
		ihl = 0x0(0)
		diffserv = 0x00(0)
		totallen = 0x0000(0)
		identification = 0x0000(0)
		flags = 0x0(0)
		fragoffset = 0x0000(0)
		ttl = 0x00(0)
		protocol = 0x00(0)
		hdrchecksum = 0x0000(0)
		srcAddr = 0x00000000(0)
		dstAddr = 0x00000000(0)
	)
		udp = (
		isValid = 0x0(0)
		sport = 0x0000(0)
		dport = 0x0000(0)
		len = 0x0000(0)
		chksum = 0x0000(0)
	)
	)
	Parser_extracts = (
		size = 0x00000070(112)
	)
Section start finished
-------------------------------------------------------------------
processing section parse_ipv4 in stage 2
-------------------------------------------------------------------
Section parse_ipv4 starting

	extracting 160 bits at offset 0x0070(112)
		version_0 = 0x4(4)
		ihl_0 = 0x5(5)
		diffserv_0 = 0x00(0)
		totallen_0 = 0x006a(106)
		identification_0 = 0x59b1(22961)
		flags_0 = 0x2(2)
		fragoffset_0 = 0x0000(0)
		ttl_0 = 0x40(64)
		protocol_0 = 0x11(17)
		hdrchecksum_0 = 0xe2cf(58063)
		srcAddr_0 = 0x7f000001(2130706433)
		dstAddr_0 = 0x7f000001(2130706433)

	method update (tuples)
		hdr.ipv4.isValid = 0x1(1)
		hdr.ipv4.version = 0x4(4)
		hdr.ipv4.ihl = 0x5(5)
		hdr.ipv4.diffserv = 0x00(0)
		hdr.ipv4.totallen = 0x006a(106)
		hdr.ipv4.identification = 0x59b1(22961)
		hdr.ipv4.flags = 0x2(2)
		hdr.ipv4.fragoffset = 0x0000(0)
		hdr.ipv4.ttl = 0x40(64)
		hdr.ipv4.protocol = 0x11(17)
		hdr.ipv4.hdrchecksum = 0xe2cf(58063)
		hdr.ipv4.srcAddr = 0x7f000001(2130706433)
		hdr.ipv4.dstAddr = 0x7f000001(2130706433)
		Parser_extracts.size = 0x00000110(272)


	method move_to_section = parse_udp

updated tuples:
	control = (
		offset = 0x0110(272)
		virtual_offset = 0x0110(272)
		section = 0x3(3)
		activeBank = 0x0(0)
		done = 0x0(0)
		error = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x006a(106)
		identification = 0x59b1(22961)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xe2cf(58063)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x0(0)
		sport = 0x0000(0)
		dport = 0x0000(0)
		len = 0x0000(0)
		chksum = 0x0000(0)
	)
	)
	Parser_extracts = (
		size = 0x00000110(272)
	)
Section parse_ipv4 finished
-------------------------------------------------------------------
processing section parse_udp in stage 3
-------------------------------------------------------------------
Section parse_udp starting

	extracting 64 bits at offset 0x0110(272)
		sport_0 = 0xb77c(46972)
		dport_0 = 0x2bcb(11211)
		len_0 = 0x0056(86)
		chksum_0 = 0xfe69(65129)

	method update (tuples)
		hdr.udp.isValid = 0x1(1)
		hdr.udp.sport = 0xb77c(46972)
		hdr.udp.dport = 0x2bcb(11211)
		hdr.udp.len = 0x0056(86)
		hdr.udp.chksum = 0xfe69(65129)
		Parser_extracts.size = 0x00000150(336)


	method move_to_section = accept

updated tuples:
	control = (
		offset = 0x0150(336)
		virtual_offset = 0x0150(336)
		section = 0x4(4)
		activeBank = 0x0(0)
		done = 0x0(0)
		error = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x006a(106)
		identification = 0x59b1(22961)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xe2cf(58063)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0xb77c(46972)
		dport = 0x2bcb(11211)
		len = 0x0056(86)
		chksum = 0xfe69(65129)
	)
	)
	Parser_extracts = (
		size = 0x00000150(336)
	)
Section parse_udp finished
-------------------------------------------------------------------
processing section accept in stage 4
-------------------------------------------------------------------
Section accept starting


	method move_to_section = done(0)

updated tuples:
	control = (
		offset = 0x0150(336)
		virtual_offset = 0x0150(336)
		section = 0x0(0)
		activeBank = 0x0(0)
		done = 0x1(1)
		error = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x006a(106)
		identification = 0x59b1(22961)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xe2cf(58063)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0xb77c(46972)
		dport = 0x2bcb(11211)
		len = 0x0056(86)
		chksum = 0xfe69(65129)
	)
	)
	Parser_extracts = (
		size = 0x00000150(336)
	)
Section accept finished
-------------------------------------------------------------------
final inout and output tuples:

Note: this engine's wrapper will clear the upper control tuple fields on output, except for the 'control.error' field.

	control = (
		offset = 0x0000(0)
		virtual_offset = 0x0000(0)
		section = 0x0(0)
		activeBank = 0x0(0)
		done = 0x0(0)
		error = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x006a(106)
		identification = 0x59b1(22961)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xe2cf(58063)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0xb77c(46972)
		dport = 0x2bcb(11211)
		len = 0x0056(86)
		chksum = 0xfe69(65129)
	)
	)
	Parser_extracts = (
		size = 0x00000150(336)
	)
Exiting engine Parser
===================================================================
===================================================================
Entering engine CheckCache_lvl
input packet (0 bytes)
initial input and inout tuples:
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x006a(106)
		identification = 0x59b1(22961)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xe2cf(58063)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0xb77c(46972)
		dport = 0x2bcb(11211)
		len = 0x0056(86)
		chksum = 0xfe69(65129)
	)
	)
	ioports = (
		ingress_port = 0x0(0)
		egress_port = 0x0(0)
	)
clear internal and output-only tuples
	control = (
		offset = 0x0000(0)
		virtual_offset = 0x0000(0)
		section = 0x0(0)
		activeBank = 0x0(0)
		done = 0x0(0)
		error = 0x0(0)
	)
	CheckCache_fl = (
		forward_1 = 0x0(0)
	)
	local_state = (
		id = 0x0000(0)
	)
processing section setup in stage 1
-------------------------------------------------------------------
Section setup starting


	method move_to_section = done(0)

updated tuples:
	control = (
		offset = 0x0000(0)
		virtual_offset = 0x0000(0)
		section = 0x0(0)
		activeBank = 0x0(0)
		done = 0x1(1)
		error = 0x0(0)
	)
	CheckCache_fl = (
		forward_1 = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x006a(106)
		identification = 0x59b1(22961)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xe2cf(58063)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0xb77c(46972)
		dport = 0x2bcb(11211)
		len = 0x0056(86)
		chksum = 0xfe69(65129)
	)
	)
	ioports = (
		ingress_port = 0x0(0)
		egress_port = 0x0(0)
	)
	local_state = (
		id = 0x0000(0)
	)
Section setup finished
-------------------------------------------------------------------
final inout and output tuples:

Note: this engine's wrapper will clear the upper control tuple fields on output, except for the 'control.error' field.

	CheckCache_fl = (
		forward_1 = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x006a(106)
		identification = 0x59b1(22961)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xe2cf(58063)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0xb77c(46972)
		dport = 0x2bcb(11211)
		len = 0x0056(86)
		chksum = 0xfe69(65129)
	)
	)
	ioports = (
		ingress_port = 0x0(0)
		egress_port = 0x0(0)
	)
	local_state = (
		id = 0x0000(0)
	)
Exiting engine CheckCache_lvl
===================================================================
===================================================================
Entering engine CheckCache_lvl_0
input packet (0 bytes)
initial input and inout tuples:
	CheckCache_fl = (
		forward_1 = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x006a(106)
		identification = 0x59b1(22961)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xe2cf(58063)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0xb77c(46972)
		dport = 0x2bcb(11211)
		len = 0x0056(86)
		chksum = 0xfe69(65129)
	)
	)
	ioports = (
		ingress_port = 0x0(0)
		egress_port = 0x0(0)
	)
	local_state = (
		id = 0x0000(0)
	)
clear internal and output-only tuples
	control = (
		offset = 0x0000(0)
		virtual_offset = 0x0000(0)
		section = 0x0(0)
		activeBank = 0x0(0)
		done = 0x0(0)
		error = 0x0(0)
	)
	memcached_input = (
		stateful_valid = 0x0(0)
	)
processing section condition_sec_0 in stage 1
-------------------------------------------------------------------
Section condition_sec_0 starting

	method update (tuples)
		local_state.id = 0x0005(5)


	method move_to_section = condition_sec

updated tuples:
	control = (
		offset = 0x0000(0)
		virtual_offset = 0x0000(0)
		section = 0x2(2)
		activeBank = 0x0(0)
		done = 0x0(0)
		error = 0x0(0)
	)
	CheckCache_fl = (
		forward_1 = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x006a(106)
		identification = 0x59b1(22961)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xe2cf(58063)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0xb77c(46972)
		dport = 0x2bcb(11211)
		len = 0x0056(86)
		chksum = 0xfe69(65129)
	)
	)
	ioports = (
		ingress_port = 0x0(0)
		egress_port = 0x0(0)
	)
	local_state = (
		id = 0x0005(5)
	)
	memcached_input = (
		stateful_valid = 0x0(0)
	)
Section condition_sec_0 finished
-------------------------------------------------------------------
processing section condition_sec in stage 2
-------------------------------------------------------------------
Section condition_sec starting

	method update (tuples)
		local_state.id = 0x0005(5)


	method move_to_section = act_0_sec

updated tuples:
	control = (
		offset = 0x0000(0)
		virtual_offset = 0x0000(0)
		section = 0x1(1)
		activeBank = 0x0(0)
		done = 0x0(0)
		error = 0x0(0)
	)
	CheckCache_fl = (
		forward_1 = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x006a(106)
		identification = 0x59b1(22961)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xe2cf(58063)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0xb77c(46972)
		dport = 0x2bcb(11211)
		len = 0x0056(86)
		chksum = 0xfe69(65129)
	)
	)
	ioports = (
		ingress_port = 0x0(0)
		egress_port = 0x0(0)
	)
	local_state = (
		id = 0x0005(5)
	)
	memcached_input = (
		stateful_valid = 0x0(0)
	)
Section condition_sec finished
-------------------------------------------------------------------
processing section act_0_sec in stage 3
-------------------------------------------------------------------
Section act_0_sec starting

	method update (tuples)
		memcached_input.stateful_valid = 0x1(1)
		local_state.id = 0x0004(4)


	method move_to_section = local_end

updated tuples:
	control = (
		offset = 0x0000(0)
		virtual_offset = 0x0000(0)
		section = 0x4(4)
		activeBank = 0x0(0)
		done = 0x0(0)
		error = 0x0(0)
	)
	CheckCache_fl = (
		forward_1 = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x006a(106)
		identification = 0x59b1(22961)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xe2cf(58063)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0xb77c(46972)
		dport = 0x2bcb(11211)
		len = 0x0056(86)
		chksum = 0xfe69(65129)
	)
	)
	ioports = (
		ingress_port = 0x0(0)
		egress_port = 0x0(0)
	)
	local_state = (
		id = 0x0004(4)
	)
	memcached_input = (
		stateful_valid = 0x1(1)
	)
Section act_0_sec finished
-------------------------------------------------------------------
processing section local_end in stage 4
-------------------------------------------------------------------
Section local_end starting


	method move_to_section = done(0)

updated tuples:
	control = (
		offset = 0x0000(0)
		virtual_offset = 0x0000(0)
		section = 0x0(0)
		activeBank = 0x0(0)
		done = 0x1(1)
		error = 0x0(0)
	)
	CheckCache_fl = (
		forward_1 = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x006a(106)
		identification = 0x59b1(22961)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xe2cf(58063)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0xb77c(46972)
		dport = 0x2bcb(11211)
		len = 0x0056(86)
		chksum = 0xfe69(65129)
	)
	)
	ioports = (
		ingress_port = 0x0(0)
		egress_port = 0x0(0)
	)
	local_state = (
		id = 0x0004(4)
	)
	memcached_input = (
		stateful_valid = 0x1(1)
	)
Section local_end finished
-------------------------------------------------------------------
final inout and output tuples:

Note: this engine's wrapper will clear the upper control tuple fields on output, except for the 'control.error' field.

	CheckCache_fl = (
		forward_1 = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x006a(106)
		identification = 0x59b1(22961)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xe2cf(58063)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0xb77c(46972)
		dport = 0x2bcb(11211)
		len = 0x0056(86)
		chksum = 0xfe69(65129)
	)
	)
	ioports = (
		ingress_port = 0x0(0)
		egress_port = 0x0(0)
	)
	local_state = (
		id = 0x0004(4)
	)
	memcached_input = (
		stateful_valid = 0x1(1)
	)
Exiting engine CheckCache_lvl_0
===================================================================
===================================================================
Entering engine memcached_0
input packet (120 bytes)
 0x0000(0) : 00 00 00 00 00 00 00 00 00 00 00 00 08 00 45 00 
0x0010(16) : 00 6a 59 b1 40 00 40 11 e2 cf 7f 00 00 01 7f 00 
0x0020(32) : 00 01 b7 7c 2b cb 00 56 fe 69 00 01 00 00 00 01 
0x0030(48) : 01 00 67 65 74 20 10 10 10 10 10 10 10 10 61 31 
0x0040(64) : 4c 48 4c 7a 42 61 76 49 72 30 39 38 43 79 74 2d 
0x0050(80) : 2e 34 77 4d 67 6c 54 56 79 70 35 66 46 66 68 61 
0x0060(96) : 77 30 59 35 61 52 4f 51 52 58 59 64 55 50 63 53 
0x0070(112) : 54 57 6f 37 46 46 0d 0a 
initial input and inout tuples:
	control = (
		offset = 0x0000(0)
		virtual_offset = 0x0000(0)
		section = 0x0(0)
		activeBank = 0x0(0)
		done = 0x0(0)
		error = 0x0(0)
	)
	CheckCache_fl = (
		forward_1 = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x006a(106)
		identification = 0x59b1(22961)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xe2cf(58063)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0xb77c(46972)
		dport = 0x2bcb(11211)
		len = 0x0056(86)
		chksum = 0xfe69(65129)
	)
	)
	ioports = (
		ingress_port = 0x0(0)
		egress_port = 0x0(0)
	)
	local_state = (
		id = 0x0004(4)
	)
	Parser_extracts = (
		size = 0x00000150(336)
	)
	memcached_input = (
		stateful_valid = 0x1(1)
	)
clear internal and output-only tuples
	memcached_output = (
		forward = 0x0(0)
	)
Enter USER ENGINE FUNCTION
0
134235392
29934965349171217
16343421210727644928
483218915262550
18332183762483281921
72171279475544080
1157442765409247537
5496727433189094985
8228139433018881069
3329417198864979030
8750552789364926561
8588462575196458833
5933590796523561811
6077448505352654090
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<Inside MemCore<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< 
The No. 2Packet
1
128
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<Inside MemCore<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< 
===================================================================
Entering engine CheckCache_lvl_1
input packet (0 bytes)
initial input and inout tuples:
	CheckCache_fl = (
		forward_1 = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x047a(1146)
		identification = 0x59b1(22961)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xe2cf(58063)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0x2bcb(11211)
		dport = 0xb77c(46972)
		len = 0x0466(1126)
		chksum = 0xfe69(65129)
	)
	)
	ioports = (
		ingress_port = 0x0(0)
		egress_port = 0x0(0)
	)
	local_state = (
		id = 0x0004(4)
	)
	memcached_output = (
		forward = 0x0(0)
	)
clear internal and output-only tuples
	control = (
		offset = 0x0000(0)
		virtual_offset = 0x0000(0)
		section = 0x0(0)
		activeBank = 0x0(0)
		done = 0x0(0)
		error = 0x0(0)
	)
processing section local_start in stage 1
-------------------------------------------------------------------
Section local_start starting


	method move_to_section = memcached_sec

updated tuples:
	control = (
		offset = 0x0000(0)
		virtual_offset = 0x0000(0)
		section = 0x2(2)
		activeBank = 0x0(0)
		done = 0x0(0)
		error = 0x0(0)
	)
	CheckCache_fl = (
		forward_1 = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x047a(1146)
		identification = 0x59b1(22961)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xe2cf(58063)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0x2bcb(11211)
		dport = 0xb77c(46972)
		len = 0x0466(1126)
		chksum = 0xfe69(65129)
	)
	)
	ioports = (
		ingress_port = 0x0(0)
		egress_port = 0x0(0)
	)
	local_state = (
		id = 0x0004(4)
	)
	memcached_output = (
		forward = 0x0(0)
	)
Section local_start finished
-------------------------------------------------------------------
processing section memcached_sec in stage 2
-------------------------------------------------------------------
Section memcached_sec starting

	method update (tuples)
		CheckCache_fl.forward_1 = 0x0(0)


	method move_to_section = sink

updated tuples:
	control = (
		offset = 0x0000(0)
		virtual_offset = 0x0000(0)
		section = 0x3(3)
		activeBank = 0x0(0)
		done = 0x0(0)
		error = 0x0(0)
	)
	CheckCache_fl = (
		forward_1 = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x047a(1146)
		identification = 0x59b1(22961)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xe2cf(58063)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0x2bcb(11211)
		dport = 0xb77c(46972)
		len = 0x0466(1126)
		chksum = 0xfe69(65129)
	)
	)
	ioports = (
		ingress_port = 0x0(0)
		egress_port = 0x0(0)
	)
	local_state = (
		id = 0x0004(4)
	)
	memcached_output = (
		forward = 0x0(0)
	)
Section memcached_sec finished
-------------------------------------------------------------------
processing section sink in stage 3
-------------------------------------------------------------------
Section sink starting


	method move_to_section = done(0)

updated tuples:
	control = (
		offset = 0x0000(0)
		virtual_offset = 0x0000(0)
		section = 0x0(0)
		activeBank = 0x0(0)
		done = 0x1(1)
		error = 0x0(0)
	)
	CheckCache_fl = (
		forward_1 = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x047a(1146)
		identification = 0x59b1(22961)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xe2cf(58063)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0x2bcb(11211)
		dport = 0xb77c(46972)
		len = 0x0466(1126)
		chksum = 0xfe69(65129)
	)
	)
	ioports = (
		ingress_port = 0x0(0)
		egress_port = 0x0(0)
	)
	local_state = (
		id = 0x0004(4)
	)
	memcached_output = (
		forward = 0x0(0)
	)
Section sink finished
-------------------------------------------------------------------
final inout and output tuples:

Note: this engine's wrapper will clear the upper control tuple fields on output, except for the 'control.error' field.

	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x047a(1146)
		identification = 0x59b1(22961)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xe2cf(58063)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0x2bcb(11211)
		dport = 0xb77c(46972)
		len = 0x0466(1126)
		chksum = 0xfe69(65129)
	)
	)
	ioports = (
		ingress_port = 0x0(0)
		egress_port = 0x0(0)
	)
Exiting engine CheckCache_lvl_1
===================================================================
===================================================================
Entering engine Deparser
input packet (1160 bytes)
 0x0000(0) : 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0x0010(16) : 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0x0020(32) : 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 01 
0x0030(48) : 00 00 56 41 4c 55 45 20 10 10 10 10 10 10 10 10 
0x0040(64) : 61 31 4c 48 4c 7a 42 61 76 49 72 30 39 38 43 79 
0x0050(80) : 74 2d 2e 34 77 4d 67 6c 54 56 79 70 35 66 46 66 
0x0060(96) : 68 61 77 30 59 35 61 52 4f 51 52 58 59 64 55 50 
0x0070(112) : 63 53 54 57 6f 37 46 46 20 30 20 31 30 32 34 0d 
0x0080(128) : 0a 61 31 4c 48 4c 7a 42 61 76 49 72 30 39 38 43 
0x0090(144) : 79 74 2d 2e 34 77 4d 67 6c 54 56 79 70 35 66 46 
0x00a0(160) : 66 68 61 77 30 59 35 61 52 4f 51 52 58 59 64 55 
0x00b0(176) : 50 63 53 54 57 6f 37 46 46 64 42 32 69 72 49 4c 
0x00c0(192) : 57 73 46 57 4f 4c 35 70 6a 56 45 45 31 72 69 51 
0x00d0(208) : 52 38 74 78 78 2d 41 41 63 4d 44 49 42 56 64 68 
0x00e0(224) : 4c 73 42 6b 42 47 58 75 6c 6d 37 6d 62 70 41 31 
0x00f0(240) : 79 32 79 74 31 37 31 64 54 45 76 65 6a 57 4a 33 
0x0100(256) : 4d 55 6e 59 6c 49 51 55 32 58 46 65 4c 50 66 48 
0x0110(272) : 52 62 38 53 69 39 33 39 4f 79 6e 35 53 34 38 70 
0x0120(288) : 5a 76 4c 49 43 6c 6d 45 48 2d 73 63 50 56 74 71 
0x0130(304) : 35 2d 48 6e 38 4b 78 57 48 69 63 6a 6e 6b 57 4b 
0x0140(320) : 65 72 63 71 62 4d 32 73 4d 76 53 6c 4f 4a 5a 54 
0x0150(336) : 49 71 46 51 39 41 78 51 73 58 37 64 46 65 78 74 
0x0160(352) : 54 58 68 32 75 6b 75 45 64 4b 7a 2d 64 57 54 76 
0x0170(368) : 4c 69 4b 55 73 46 75 69 6d 2d 4b 2d 64 46 74 35 
0x0180(384) : 6e 59 37 66 47 30 74 74 4b 71 74 79 4b 4b 72 66 
0x0190(400) : 30 39 37 73 4f 2d 59 38 2d 73 38 63 36 2d 68 74 
0x01a0(416) : 58 70 57 6f 70 4e 66 37 42 57 33 56 71 76 39 71 
0x01b0(432) : 32 47 67 52 47 44 5a 46 33 68 72 39 67 58 30 43 
0x01c0(448) : 4b 57 2e 37 74 64 45 32 38 49 59 79 42 68 6e 44 
0x01d0(464) : 78 52 65 42 65 43 51 69 74 47 72 59 6e 73 6b 35 
0x01e0(480) : 4d 69 43 45 4a 51 47 52 69 6f 4f 74 54 39 35 50 
0x01f0(496) : 61 6a 61 44 76 2d 76 6e 46 6b 4a 30 61 31 35 78 
0x0200(512) : 6a 48 39 30 68 50 53 4f 43 71 46 66 7a 4b 32 58 
0x0210(528) : 32 64 6b 78 63 64 69 72 4d 2d 72 77 30 77 72 6a 
0x0220(544) : 42 2e 6b 73 4f 41 45 61 2e 55 44 78 6f 47 53 71 
0x0230(560) : 74 42 6d 54 6f 53 49 38 53 37 33 53 31 75 41 43 
0x0240(576) : 74 75 32 46 32 48 70 30 6c 30 78 58 47 4e 4d 37 
0x0250(592) : 59 36 61 4c 59 73 54 2e 7a 57 52 2e 50 62 41 47 
0x0260(608) : 54 44 56 56 55 49 56 44 49 51 6b 5a 6e 34 67 4b 
0x0270(624) : 41 46 66 6a 35 36 68 33 64 36 31 30 68 43 47 38 
0x0280(640) : 50 6c 64 74 31 36 34 4a 57 6f 73 49 74 58 63 31 
0x0290(656) : 6d 46 6b 72 4c 51 75 79 57 77 79 43 36 43 4b 56 
0x02a0(672) : 78 79 4d 79 32 51 47 5a 43 36 72 33 64 52 35 4e 
0x02b0(688) : 67 70 44 2d 44 35 79 6b 2d 75 77 35 35 45 61 30 
0x02c0(704) : 41 77 7a 44 4b 44 6d 58 4a 62 61 78 30 66 49 67 
0x02d0(720) : 54 56 66 67 62 62 4f 61 55 49 67 5a 58 45 5a 68 
0x02e0(736) : 39 57 75 54 6a 65 2e 31 44 5a 79 44 43 45 74 66 
0x02f0(752) : 6b 58 4b 4a 36 69 74 61 2d 58 37 57 6d 68 42 76 
0x0300(768) : 42 34 4d 76 69 4c 77 77 75 73 37 34 34 2d 6b 6f 
0x0310(784) : 57 32 35 63 6b 7a 42 6a 55 49 44 45 7a 50 37 39 
0x0320(800) : 54 55 32 39 70 79 33 68 6f 42 6c 73 41 54 66 67 
0x0330(816) : 56 6b 47 45 68 52 78 41 6b 39 4f 68 59 57 71 2d 
0x0340(832) : 2e 73 38 6e 6f 43 53 61 4e 42 52 58 66 34 42 38 
0x0350(848) : 6f 52 4d 55 74 49 65 62 52 30 47 7a 57 35 79 55 
0x0360(864) : 78 34 46 6b 47 68 49 64 74 6a 38 57 6e 4a 65 61 
0x0370(880) : 6c 2d 32 63 48 67 42 69 67 52 66 42 57 62 66 53 
0x0380(896) : 66 76 41 77 61 53 58 52 41 67 78 78 7a 61 56 69 
0x0390(912) : 5a 58 49 71 42 54 57 73 76 39 31 50 6b 67 72 4e 
0x03a0(928) : 5a 2d 48 38 53 70 5a 63 54 56 58 51 33 31 37 63 
0x03b0(944) : 59 50 51 6b 74 77 61 6d 33 62 39 6e 46 2d 38 70 
0x03c0(960) : 2e 51 78 51 44 55 30 67 7a 59 34 30 5a 42 63 35 
0x03d0(976) : 62 30 70 53 77 4e 43 7a 79 4c 6b 43 4b 74 2d 4a 
0x03e0(992) : 48 77 6a 55 4f 6b 38 4d 47 43 4d 70 4f 7a 75 7a 
0x03f0(1008) : 7a 69 50 75 33 62 72 30 77 61 43 46 52 42 59 69 
0x0400(1024) : 35 46 41 54 7a 49 70 44 55 41 30 73 37 76 70 34 
0x0410(1040) : 62 43 79 65 6e 6f 65 69 4d 71 78 6e 2d 54 54 34 
0x0420(1056) : 69 64 59 67 76 4c 74 4e 56 75 45 63 6e 31 68 4d 
0x0430(1072) : 45 64 2e 2d 50 64 68 6c 52 63 57 52 33 7a 56 6d 
0x0440(1088) : 61 31 51 54 4e 48 72 73 39 33 54 77 34 38 47 49 
0x0450(1104) : 6c 46 49 39 73 7a 75 48 61 50 69 64 4d 43 4e 78 
0x0460(1120) : 44 6e 4f 61 33 44 52 43 47 75 37 4c 30 4e 64 6c 
0x0470(1136) : 63 76 75 53 74 6e 6b 52 41 51 32 57 63 51 52 71 
0x0480(1152) : 42 0d 0a 45 4e 44 0d 0a 
initial input and inout tuples:
	control = (
		offset = 0x0000(0)
		virtual_offset = 0x0000(0)
		section = 0x0(0)
		activeBank = 0x0(0)
		done = 0x0(0)
		error = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x047a(1146)
		identification = 0x59b1(22961)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xe2cf(58063)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0x2bcb(11211)
		dport = 0xb77c(46972)
		len = 0x0466(1126)
		chksum = 0xfe69(65129)
	)
	)
	Deparser_extracts = (
		size = 0x00000150(336)
	)
clear internal and output-only tuples
processing section extract_headers_sec in stage 1
-------------------------------------------------------------------
Section extract_headers_sec starting


	method remove
	removing 42 bytes at byte 0:
 0x0000(0) : 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0x0010(16) : 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
0x0020(32) : 00 00 00 00 00 00 00 00 00 00 
	method move_to_section = act_sec

updated tuples:
	control = (
		offset = 0x0000(0)
		virtual_offset = 0x0150(336)
		section = 0x1(1)
		activeBank = 0x0(0)
		done = 0x0(0)
		error = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x047a(1146)
		identification = 0x59b1(22961)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xe2cf(58063)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0x2bcb(11211)
		dport = 0xb77c(46972)
		len = 0x0466(1126)
		chksum = 0xfe69(65129)
	)
	)
	Deparser_extracts = (
		size = 0x00000150(336)
	)
Section extract_headers_sec finished
-------------------------------------------------------------------
processing section act_sec in stage 2
-------------------------------------------------------------------
Section act_sec starting


	method move_to_section = emit_3

updated tuples:
	control = (
		offset = 0x0000(0)
		virtual_offset = 0x0150(336)
		section = 0x5(5)
		activeBank = 0x0(0)
		done = 0x0(0)
		error = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x047a(1146)
		identification = 0x59b1(22961)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xe2cf(58063)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0x2bcb(11211)
		dport = 0xb77c(46972)
		len = 0x0466(1126)
		chksum = 0xfe69(65129)
	)
	)
	Deparser_extracts = (
		size = 0x00000150(336)
	)
Section act_sec finished
-------------------------------------------------------------------
processing section emit_3 in stage 3
-------------------------------------------------------------------
Section emit_3 starting

	method update (tuples)


	method update (packet)
		 dst = 0x000000000000(0)
		 src = 0x000000000000(0)
		 type = 0x0800(2048)

	method insert
	inserting 14 bytes at byte 0:
 0x0000(0) : 00 00 00 00 00 00 00 00 00 00 00 00 08 00 
	method move_to_section = emit_2

updated tuples:
	control = (
		offset = 0x0070(112)
		virtual_offset = 0x0150(336)
		section = 0x4(4)
		activeBank = 0x0(0)
		done = 0x0(0)
		error = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x047a(1146)
		identification = 0x59b1(22961)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xe2cf(58063)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0x2bcb(11211)
		dport = 0xb77c(46972)
		len = 0x0466(1126)
		chksum = 0xfe69(65129)
	)
	)
	Deparser_extracts = (
		size = 0x00000150(336)
	)
Section emit_3 finished
-------------------------------------------------------------------
processing section emit_2 in stage 4
-------------------------------------------------------------------
Section emit_2 starting

	method update (tuples)


	method update (packet)
		 traffic_class = 0x0(0)
		 block_index = 0x00(0)
		 packet_index = 0x00(0)
		 original_type = 0x0000(0)

	method insert
	inserting 0 bytes at byte 14:
 0x0000(0) :                                           
	method move_to_section = emit_1

updated tuples:
	control = (
		offset = 0x0070(112)
		virtual_offset = 0x0150(336)
		section = 0x3(3)
		activeBank = 0x0(0)
		done = 0x0(0)
		error = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x047a(1146)
		identification = 0x59b1(22961)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xe2cf(58063)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0x2bcb(11211)
		dport = 0xb77c(46972)
		len = 0x0466(1126)
		chksum = 0xfe69(65129)
	)
	)
	Deparser_extracts = (
		size = 0x00000150(336)
	)
Section emit_2 finished
-------------------------------------------------------------------
processing section emit_1 in stage 5
-------------------------------------------------------------------
Section emit_1 starting

	method update (tuples)


	method update (packet)
		 version = 0x4(4)
		 ihl = 0x5(5)
		 diffserv = 0x00(0)
		 totallen = 0x047a(1146)
		 identification = 0x59b1(22961)
		 flags = 0x2(2)
		 fragoffset = 0x0000(0)
		 ttl = 0x40(64)
		 protocol = 0x11(17)
		 hdrchecksum = 0xe2cf(58063)
		 srcAddr = 0x7f000001(2130706433)
		 dstAddr = 0x7f000001(2130706433)

	method insert
	inserting 20 bytes at byte 14:
 0x0000(0) :                                           45 00 
0x0010(16) : 04 7a 59 b1 40 00 40 11 e2 cf 7f 00 00 01 7f 00 
0x0020(32) : 00 01 
	method move_to_section = emit_0

updated tuples:
	control = (
		offset = 0x0110(272)
		virtual_offset = 0x0150(336)
		section = 0x2(2)
		activeBank = 0x0(0)
		done = 0x0(0)
		error = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x047a(1146)
		identification = 0x59b1(22961)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xe2cf(58063)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0x2bcb(11211)
		dport = 0xb77c(46972)
		len = 0x0466(1126)
		chksum = 0xfe69(65129)
	)
	)
	Deparser_extracts = (
		size = 0x00000150(336)
	)
Section emit_1 finished
-------------------------------------------------------------------
processing section emit_0 in stage 6
-------------------------------------------------------------------
Section emit_0 starting

	method update (tuples)


	method update (packet)
		 sport = 0x2bcb(11211)
		 dport = 0xb77c(46972)
		 len = 0x0466(1126)
		 chksum = 0xfe69(65129)

	method insert
	inserting 8 bytes at byte 34:
0x0020(32) :       2b cb b7 7c 04 66 fe 69 
	method move_to_section = done(0)

updated tuples:
	control = (
		offset = 0x0150(336)
		virtual_offset = 0x0150(336)
		section = 0x0(0)
		activeBank = 0x0(0)
		done = 0x1(1)
		error = 0x0(0)
	)
	hdr = (
		eth = (
		isValid = 0x1(1)
		dst = 0x000000000000(0)
		src = 0x000000000000(0)
		type = 0x0800(2048)
	)
		fec = (
		isValid = 0x0(0)
		traffic_class = 0x0(0)
		block_index = 0x00(0)
		packet_index = 0x00(0)
		original_type = 0x0000(0)
	)
		ipv4 = (
		isValid = 0x1(1)
		version = 0x4(4)
		ihl = 0x5(5)
		diffserv = 0x00(0)
		totallen = 0x047a(1146)
		identification = 0x59b1(22961)
		flags = 0x2(2)
		fragoffset = 0x0000(0)
		ttl = 0x40(64)
		protocol = 0x11(17)
		hdrchecksum = 0xe2cf(58063)
		srcAddr = 0x7f000001(2130706433)
		dstAddr = 0x7f000001(2130706433)
	)
		udp = (
		isValid = 0x1(1)
		sport = 0x2bcb(11211)
		dport = 0xb77c(46972)
		len = 0x0466(1126)
		chksum = 0xfe69(65129)
	)
	)
	Deparser_extracts = (
		size = 0x00000150(336)
	)
Section emit_0 finished
-------------------------------------------------------------------
final inout and output tuples:

Note: this engine's wrapper will clear the upper control tuple fields on output, except for the 'control.error' field.

	control = (
		offset = 0x0000(0)
		virtual_offset = 0x0000(0)
		section = 0x0(0)
		activeBank = 0x0(0)
		done = 0x0(0)
		error = 0x0(0)
	)
output packet (1160 bytes)
 0x0000(0) : 00 00 00 00 00 00 00 00 00 00 00 00 08 00 45 00 
0x0010(16) : 04 7a 59 b1 40 00 40 11 e2 cf 7f 00 00 01 7f 00 
0x0020(32) : 00 01 2b cb b7 7c 04 66 fe 69 00 01 00 00 00 01 
0x0030(48) : 00 00 56 41 4c 55 45 20 10 10 10 10 10 10 10 10 
0x0040(64) : 61 31 4c 48 4c 7a 42 61 76 49 72 30 39 38 43 79 
0x0050(80) : 74 2d 2e 34 77 4d 67 6c 54 56 79 70 35 66 46 66 
0x0060(96) : 68 61 77 30 59 35 61 52 4f 51 52 58 59 64 55 50 
0x0070(112) : 63 53 54 57 6f 37 46 46 20 30 20 31 30 32 34 0d 
0x0080(128) : 0a 61 31 4c 48 4c 7a 42 61 76 49 72 30 39 38 43 
0x0090(144) : 79 74 2d 2e 34 77 4d 67 6c 54 56 79 70 35 66 46 
0x00a0(160) : 66 68 61 77 30 59 35 61 52 4f 51 52 58 59 64 55 
0x00b0(176) : 50 63 53 54 57 6f 37 46 46 64 42 32 69 72 49 4c 
0x00c0(192) : 57 73 46 57 4f 4c 35 70 6a 56 45 45 31 72 69 51 
0x00d0(208) : 52 38 74 78 78 2d 41 41 63 4d 44 49 42 56 64 68 
0x00e0(224) : 4c 73 42 6b 42 47 58 75 6c 6d 37 6d 62 70 41 31 
0x00f0(240) : 79 32 79 74 31 37 31 64 54 45 76 65 6a 57 4a 33 
0x0100(256) : 4d 55 6e 59 6c 49 51 55 32 58 46 65 4c 50 66 48 
0x0110(272) : 52 62 38 53 69 39 33 39 4f 79 6e 35 53 34 38 70 
0x0120(288) : 5a 76 4c 49 43 6c 6d 45 48 2d 73 63 50 56 74 71 
0x0130(304) : 35 2d 48 6e 38 4b 78 57 48 69 63 6a 6e 6b 57 4b 
0x0140(320) : 65 72 63 71 62 4d 32 73 4d 76 53 6c 4f 4a 5a 54 
0x0150(336) : 49 71 46 51 39 41 78 51 73 58 37 64 46 65 78 74 
0x0160(352) : 54 58 68 32 75 6b 75 45 64 4b 7a 2d 64 57 54 76 
0x0170(368) : 4c 69 4b 55 73 46 75 69 6d 2d 4b 2d 64 46 74 35 
0x0180(384) : 6e 59 37 66 47 30 74 74 4b 71 74 79 4b 4b 72 66 
0x0190(400) : 30 39 37 73 4f 2d 59 38 2d 73 38 63 36 2d 68 74 
0x01a0(416) : 58 70 57 6f 70 4e 66 37 42 57 33 56 71 76 39 71 
0x01b0(432) : 32 47 67 52 47 44 5a 46 33 68 72 39 67 58 30 43 
0x01c0(448) : 4b 57 2e 37 74 64 45 32 38 49 59 79 42 68 6e 44 
0x01d0(464) : 78 52 65 42 65 43 51 69 74 47 72 59 6e 73 6b 35 
0x01e0(480) : 4d 69 43 45 4a 51 47 52 69 6f 4f 74 54 39 35 50 
0x01f0(496) : 61 6a 61 44 76 2d 76 6e 46 6b 4a 30 61 31 35 78 
0x0200(512) : 6a 48 39 30 68 50 53 4f 43 71 46 66 7a 4b 32 58 
0x0210(528) : 32 64 6b 78 63 64 69 72 4d 2d 72 77 30 77 72 6a 
0x0220(544) : 42 2e 6b 73 4f 41 45 61 2e 55 44 78 6f 47 53 71 
0x0230(560) : 74 42 6d 54 6f 53 49 38 53 37 33 53 31 75 41 43 
0x0240(576) : 74 75 32 46 32 48 70 30 6c 30 78 58 47 4e 4d 37 
0x0250(592) : 59 36 61 4c 59 73 54 2e 7a 57 52 2e 50 62 41 47 
0x0260(608) : 54 44 56 56 55 49 56 44 49 51 6b 5a 6e 34 67 4b 
0x0270(624) : 41 46 66 6a 35 36 68 33 64 36 31 30 68 43 47 38 
0x0280(640) : 50 6c 64 74 31 36 34 4a 57 6f 73 49 74 58 63 31 
0x0290(656) : 6d 46 6b 72 4c 51 75 79 57 77 79 43 36 43 4b 56 
0x02a0(672) : 78 79 4d 79 32 51 47 5a 43 36 72 33 64 52 35 4e 
0x02b0(688) : 67 70 44 2d 44 35 79 6b 2d 75 77 35 35 45 61 30 
0x02c0(704) : 41 77 7a 44 4b 44 6d 58 4a 62 61 78 30 66 49 67 
0x02d0(720) : 54 56 66 67 62 62 4f 61 55 49 67 5a 58 45 5a 68 
0x02e0(736) : 39 57 75 54 6a 65 2e 31 44 5a 79 44 43 45 74 66 
0x02f0(752) : 6b 58 4b 4a 36 69 74 61 2d 58 37 57 6d 68 42 76 
0x0300(768) : 42 34 4d 76 69 4c 77 77 75 73 37 34 34 2d 6b 6f 
0x0310(784) : 57 32 35 63 6b 7a 42 6a 55 49 44 45 7a 50 37 39 
0x0320(800) : 54 55 32 39 70 79 33 68 6f 42 6c 73 41 54 66 67 
0x0330(816) : 56 6b 47 45 68 52 78 41 6b 39 4f 68 59 57 71 2d 
0x0340(832) : 2e 73 38 6e 6f 43 53 61 4e 42 52 58 66 34 42 38 
0x0350(848) : 6f 52 4d 55 74 49 65 62 52 30 47 7a 57 35 79 55 
0x0360(864) : 78 34 46 6b 47 68 49 64 74 6a 38 57 6e 4a 65 61 
0x0370(880) : 6c 2d 32 63 48 67 42 69 67 52 66 42 57 62 66 53 
0x0380(896) : 66 76 41 77 61 53 58 52 41 67 78 78 7a 61 56 69 
0x0390(912) : 5a 58 49 71 42 54 57 73 76 39 31 50 6b 67 72 4e 
0x03a0(928) : 5a 2d 48 38 53 70 5a 63 54 56 58 51 33 31 37 63 
0x03b0(944) : 59 50 51 6b 74 77 61 6d 33 62 39 6e 46 2d 38 70 
0x03c0(960) : 2e 51 78 51 44 55 30 67 7a 59 34 30 5a 42 63 35 
0x03d0(976) : 62 30 70 53 77 4e 43 7a 79 4c 6b 43 4b 74 2d 4a 
0x03e0(992) : 48 77 6a 55 4f 6b 38 4d 47 43 4d 70 4f 7a 75 7a 
0x03f0(1008) : 7a 69 50 75 33 62 72 30 77 61 43 46 52 42 59 69 
0x0400(1024) : 35 46 41 54 7a 49 70 44 55 41 30 73 37 76 70 34 
0x0410(1040) : 62 43 79 65 6e 6f 65 69 4d 71 78 6e 2d 54 54 34 
0x0420(1056) : 69 64 59 67 76 4c 74 4e 56 75 45 63 6e 31 68 4d 
0x0430(1072) : 45 64 2e 2d 50 64 68 6c 52 63 57 52 33 7a 56 6d 
0x0440(1088) : 61 31 51 54 4e 48 72 73 39 33 54 77 34 38 47 49 
0x0450(1104) : 6c 46 49 39 73 7a 75 48 61 50 69 64 4d 43 4e 78 
0x0460(1120) : 44 6e 4f 61 33 44 52 43 47 75 37 4c 30 4e 64 6c 
0x0470(1136) : 63 76 75 53 74 6e 6b 52 41 51 32 57 63 51 52 71 
0x0480(1152) : 42 0d 0a 45 4e 44 0d 0a 
Exiting engine Deparser
===================================================================
final inout and output tuples:
	ioports = (
		ingress_port = 0x0(0)
		egress_port = 0x0(0)
	)
output packet (1160 bytes)
 0x0000(0) : 00 00 00 00 00 00 00 00 00 00 00 00 08 00 45 00 
0x0010(16) : 04 7a 59 b1 40 00 40 11 e2 cf 7f 00 00 01 7f 00 
0x0020(32) : 00 01 2b cb b7 7c 04 66 fe 69 00 01 00 00 00 01 
0x0030(48) : 00 00 56 41 4c 55 45 20 10 10 10 10 10 10 10 10 
0x0040(64) : 61 31 4c 48 4c 7a 42 61 76 49 72 30 39 38 43 79 
0x0050(80) : 74 2d 2e 34 77 4d 67 6c 54 56 79 70 35 66 46 66 
0x0060(96) : 68 61 77 30 59 35 61 52 4f 51 52 58 59 64 55 50 
0x0070(112) : 63 53 54 57 6f 37 46 46 20 30 20 31 30 32 34 0d 
0x0080(128) : 0a 61 31 4c 48 4c 7a 42 61 76 49 72 30 39 38 43 
0x0090(144) : 79 74 2d 2e 34 77 4d 67 6c 54 56 79 70 35 66 46 
0x00a0(160) : 66 68 61 77 30 59 35 61 52 4f 51 52 58 59 64 55 
0x00b0(176) : 50 63 53 54 57 6f 37 46 46 64 42 32 69 72 49 4c 
0x00c0(192) : 57 73 46 57 4f 4c 35 70 6a 56 45 45 31 72 69 51 
0x00d0(208) : 52 38 74 78 78 2d 41 41 63 4d 44 49 42 56 64 68 
0x00e0(224) : 4c 73 42 6b 42 47 58 75 6c 6d 37 6d 62 70 41 31 
0x00f0(240) : 79 32 79 74 31 37 31 64 54 45 76 65 6a 57 4a 33 
0x0100(256) : 4d 55 6e 59 6c 49 51 55 32 58 46 65 4c 50 66 48 
0x0110(272) : 52 62 38 53 69 39 33 39 4f 79 6e 35 53 34 38 70 
0x0120(288) : 5a 76 4c 49 43 6c 6d 45 48 2d 73 63 50 56 74 71 
0x0130(304) : 35 2d 48 6e 38 4b 78 57 48 69 63 6a 6e 6b 57 4b 
0x0140(320) : 65 72 63 71 62 4d 32 73 4d 76 53 6c 4f 4a 5a 54 
0x0150(336) : 49 71 46 51 39 41 78 51 73 58 37 64 46 65 78 74 
0x0160(352) : 54 58 68 32 75 6b 75 45 64 4b 7a 2d 64 57 54 76 
0x0170(368) : 4c 69 4b 55 73 46 75 69 6d 2d 4b 2d 64 46 74 35 
0x0180(384) : 6e 59 37 66 47 30 74 74 4b 71 74 79 4b 4b 72 66 
0x0190(400) : 30 39 37 73 4f 2d 59 38 2d 73 38 63 36 2d 68 74 
0x01a0(416) : 58 70 57 6f 70 4e 66 37 42 57 33 56 71 76 39 71 
0x01b0(432) : 32 47 67 52 47 44 5a 46 33 68 72 39 67 58 30 43 
0x01c0(448) : 4b 57 2e 37 74 64 45 32 38 49 59 79 42 68 6e 44 
0x01d0(464) : 78 52 65 42 65 43 51 69 74 47 72 59 6e 73 6b 35 
0x01e0(480) : 4d 69 43 45 4a 51 47 52 69 6f 4f 74 54 39 35 50 
0x01f0(496) : 61 6a 61 44 76 2d 76 6e 46 6b 4a 30 61 31 35 78 
0x0200(512) : 6a 48 39 30 68 50 53 4f 43 71 46 66 7a 4b 32 58 
0x0210(528) : 32 64 6b 78 63 64 69 72 4d 2d 72 77 30 77 72 6a 
0x0220(544) : 42 2e 6b 73 4f 41 45 61 2e 55 44 78 6f 47 53 71 
0x0230(560) : 74 42 6d 54 6f 53 49 38 53 37 33 53 31 75 41 43 
0x0240(576) : 74 75 32 46 32 48 70 30 6c 30 78 58 47 4e 4d 37 
0x0250(592) : 59 36 61 4c 59 73 54 2e 7a 57 52 2e 50 62 41 47 
0x0260(608) : 54 44 56 56 55 49 56 44 49 51 6b 5a 6e 34 67 4b 
0x0270(624) : 41 46 66 6a 35 36 68 33 64 36 31 30 68 43 47 38 
0x0280(640) : 50 6c 64 74 31 36 34 4a 57 6f 73 49 74 58 63 31 
0x0290(656) : 6d 46 6b 72 4c 51 75 79 57 77 79 43 36 43 4b 56 
0x02a0(672) : 78 79 4d 79 32 51 47 5a 43 36 72 33 64 52 35 4e 
0x02b0(688) : 67 70 44 2d 44 35 79 6b 2d 75 77 35 35 45 61 30 
0x02c0(704) : 41 77 7a 44 4b 44 6d 58 4a 62 61 78 30 66 49 67 
0x02d0(720) : 54 56 66 67 62 62 4f 61 55 49 67 5a 58 45 5a 68 
0x02e0(736) : 39 57 75 54 6a 65 2e 31 44 5a 79 44 43 45 74 66 
0x02f0(752) : 6b 58 4b 4a 36 69 74 61 2d 58 37 57 6d 68 42 76 
0x0300(768) : 42 34 4d 76 69 4c 77 77 75 73 37 34 34 2d 6b 6f 
0x0310(784) : 57 32 35 63 6b 7a 42 6a 55 49 44 45 7a 50 37 39 
0x0320(800) : 54 55 32 39 70 79 33 68 6f 42 6c 73 41 54 66 67 
0x0330(816) : 56 6b 47 45 68 52 78 41 6b 39 4f 68 59 57 71 2d 
0x0340(832) : 2e 73 38 6e 6f 43 53 61 4e 42 52 58 66 34 42 38 
0x0350(848) : 6f 52 4d 55 74 49 65 62 52 30 47 7a 57 35 79 55 
0x0360(864) : 78 34 46 6b 47 68 49 64 74 6a 38 57 6e 4a 65 61 
0x0370(880) : 6c 2d 32 63 48 67 42 69 67 52 66 42 57 62 66 53 
0x0380(896) : 66 76 41 77 61 53 58 52 41 67 78 78 7a 61 56 69 
0x0390(912) : 5a 58 49 71 42 54 57 73 76 39 31 50 6b 67 72 4e 
0x03a0(928) : 5a 2d 48 38 53 70 5a 63 54 56 58 51 33 31 37 63 
0x03b0(944) : 59 50 51 6b 74 77 61 6d 33 62 39 6e 46 2d 38 70 
0x03c0(960) : 2e 51 78 51 44 55 30 67 7a 59 34 30 5a 42 63 35 
0x03d0(976) : 62 30 70 53 77 4e 43 7a 79 4c 6b 43 4b 74 2d 4a 
0x03e0(992) : 48 77 6a 55 4f 6b 38 4d 47 43 4d 70 4f 7a 75 7a 
0x03f0(1008) : 7a 69 50 75 33 62 72 30 77 61 43 46 52 42 59 69 
0x0400(1024) : 35 46 41 54 7a 49 70 44 55 41 30 73 37 76 70 34 
0x0410(1040) : 62 43 79 65 6e 6f 65 69 4d 71 78 6e 2d 54 54 34 
0x0420(1056) : 69 64 59 67 76 4c 74 4e 56 75 45 63 6e 31 68 4d 
0x0430(1072) : 45 64 2e 2d 50 64 68 6c 52 63 57 52 33 7a 56 6d 
0x0440(1088) : 61 31 51 54 4e 48 72 73 39 33 54 77 34 38 47 49 
0x0450(1104) : 6c 46 49 39 73 7a 75 48 61 50 69 64 4d 43 4e 78 
0x0460(1120) : 44 6e 4f 61 33 44 52 43 47 75 37 4c 30 4e 64 6c 
0x0470(1136) : 63 76 75 53 74 6e 6b 52 41 51 32 57 63 51 52 71 
0x0480(1152) : 42 0d 0a 45 4e 44 0d 0a 
Exiting system XilinxSwitch
===================================================================
